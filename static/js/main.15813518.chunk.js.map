{"version":3,"sources":["api/it-inc-api.ts","components/AddItemForm.tsx","state/appReducer.ts","utils/backendErrorHandler.ts","state/listsActionsReducer.ts","state/tasksActionsReducer.ts","state/store.ts","components/EditableSpan.tsx","components/Task.tsx","components/Todolist.tsx","components/ErrorSnackbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskStatus","TaskPriority","ServerResultCodes","AddItemFormWrapper","styled","div","AddItemForm","React","memo","disabled","props","console","log","addItemCallback","toString","useState","inputText","setInputText","inputError","setInputError","addItem","useCallback","cleanString","trim","keyPressWithinInputHandler","event","key","TextField","label","size","variant","value","error","onChange","currentTarget","onKeyPress","IconButton","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","process","APP_ACTIONS_TYPE","backendAPI","todolistId","title","put","delete","name","post","get","todolistID","taskID","requestPayload","iniAppState","appStatus","setAppErrorAC","errorMessage","type","APP_SET_ERROR","setAppStatusAC","newStatus","APP_SET_STATUS","status","handleResolveWithServerErrorMessage","data","dispatch","messages","length","handleReject","message","initialState","setListStatusAC","listID","payload","entityStatus","updateTaskTC","newTaskData","getState","taskToBeChanged","tasks","find","task","id","deadline","description","priority","startDate","then","response","resultCode","success","newData","updateTaskDataAC","catch","warn","rootReducer","combineReducers","state","action","filter","map","stateCopy","todoListID","lists","newInAppList","todoList","activeFilter","list","newName","app","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","window","EditableSpan","itemName","editMode","setEditMode","setError","inputChangeHandler","saveNewName","cleanInputText","itemNameChangedCallback","enterPressHandler","Boolean","helperText","autoFocus","onBlur","onDoubleClick","Task","taskName","changeStatus","newTaskStatus","checked","Completed","New","changeName","removeTask","TaskNameWithCheckboxWrapper","Checkbox","isDone","color","TodolistCard","FilterButtonsWrapper","Todolist","demo","listStatus","useDispatch","useEffect","setTasksAC","items","filteredTasks","changeTaskStatus","addTask","addTaskAC","item","removeTaskAC","removeTaskTC","changeFilter","newFilterValue","deleteTodolist","removeListAC","changeTaskName","changeListName","changeListNameAC","changeListNameTC","List","disablePadding","ListItem","disableGutters","style","justifyContent","Button","Alert","elevation","ErrorSnackbar","isOpen","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","App","todolists","addTodolist","listName","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","top","Container","fixed","Grid","container","paddingTop","spacing","Paper","padding","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15813518.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {itIncAPI} from \"./apiKey\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': process.env.REACT_APP_API_KEY as string\r\n    }\r\n})\r\n\r\nexport enum TaskStatus {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft,\r\n}\r\n\r\nexport enum TaskPriority {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgent,\r\n    Someday,\r\n}\r\n\r\nexport type TodoListOnServerType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatus\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport enum ServerResultCodes {\r\n    success=0,\r\n    error=1,\r\n    captcha=10\r\n\r\n}\r\n\r\nexport type BaseResponseType<T = {}> = {\r\n    resultCode: ServerResultCodes\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: T\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    error: null | string\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\n\r\nexport type taskPutRequestBodyType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatus\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nexport const backendAPI = {\r\n    updateTodoList(todolistId: string, title: string) {\r\n        return instance.put<BaseResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    deleteTodoList(todolistId: string) {\r\n        return instance.delete<BaseResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    createTodoList(name: string) {\r\n        return instance.post<BaseResponseType<{ item: TodoListOnServerType }>>('todo-lists', {title: name})\r\n    },\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListOnServerType>>('todo-lists')\r\n    },\r\n    createTask(todolistID: string, name: string) {\r\n        return instance.post<BaseResponseType<{ item: TaskType }>>(`todo-lists/${todolistID}/tasks`, {title: name})\r\n    },\r\n    getTasks(todolistID: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistID}/tasks`)\r\n    },\r\n    updateTask(todolistID: string, taskID: string, requestPayload: taskPutRequestBodyType) {\r\n        return instance.put<BaseResponseType<{ item: TaskType }>>(`todo-lists/${todolistID}/tasks/${taskID}`, requestPayload)\r\n    },\r\n    deleteTask(todolistID: string, taskID: string) {\r\n        return instance.delete<BaseResponseType>(`/todo-lists/${todolistID}/tasks/${taskID}`)\r\n\r\n    }\r\n}","import React, {useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport styled from \"styled-components\";\r\n\r\ntype addItemFormPropsType = {\r\n    addItemCallback: (itemName: string) => void\r\n    disabled?: boolean\r\n}\r\nconst AddItemFormWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-bottom: 20px;\r\n`\r\n\r\nexport const AddItemForm = React.memo(({disabled = false, ...props}: addItemFormPropsType) => {\r\n    console.log(`AddItemForm with \"${props.addItemCallback.toString()}\" callback was called`)\r\n    const [inputText, setInputText] = useState<string>('')\r\n    const [inputError, setInputError] = useState<boolean>(false)\r\n\r\n    const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (inputError) {\r\n            setInputError(false)\r\n        }\r\n        setInputText(event.currentTarget.value)\r\n    }\r\n\r\n    const addItem = useCallback(() => {\r\n        const cleanString = inputText.trim()\r\n        if (cleanString) {\r\n            props.addItemCallback(cleanString)\r\n        } else {\r\n            setInputError(true)\r\n        }\r\n        setInputText('')\r\n    },[inputText, props.addItemCallback])\r\n\r\n    const keyPressWithinInputHandler = useCallback((event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }, [addItem])\r\n\r\n\r\n    return (\r\n        <AddItemFormWrapper>\r\n            <TextField\r\n                disabled={disabled}\r\n                label={inputError ? 'give it a name' : 'Title'}\r\n                size={\"small\"}\r\n                variant={\"outlined\"}\r\n                value={inputText}\r\n                error={inputError}\r\n                onChange={inputChangeHandler}\r\n                onKeyPress={keyPressWithinInputHandler}/>\r\n            <IconButton disabled={disabled} onClick={addItem}><AddBox/></IconButton>\r\n        </AddItemFormWrapper>\r\n    );\r\n});\r\n\r\n","export type EntityStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type IniAppStateType = {\r\n    appStatus: EntityStatusType\r\n    error: string | null\r\n}\r\n\r\nexport enum APP_ACTIONS_TYPE {\r\n    APP_SET_STATUS = 'APP/SET-STATUS',\r\n    APP_SET_ERROR = 'APP/SET-ERROR',\r\n}\r\n\r\nconst iniAppState: IniAppStateType = {\r\n    appStatus: 'idle',\r\n    error: null,\r\n}\r\n\r\nexport type AppReducerActionsType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>\r\n\r\nexport const appReducer = ( state: IniAppStateType = iniAppState, action: AppReducerActionsType) : IniAppStateType => {\r\n    switch (action.type){\r\n        case APP_ACTIONS_TYPE.APP_SET_STATUS:\r\n            return {...state, appStatus: action.status}\r\n        case APP_ACTIONS_TYPE.APP_SET_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\nexport const setAppErrorAC = (errorMessage: string | null) => {\r\n    return{\r\n        type: APP_ACTIONS_TYPE.APP_SET_ERROR,\r\n        error: errorMessage,\r\n    } as const\r\n}\r\n\r\nexport const setAppStatusAC = (newStatus: EntityStatusType) => {\r\n    return{\r\n        type: APP_ACTIONS_TYPE.APP_SET_STATUS,\r\n        status: newStatus,\r\n    } as const\r\n}","import {AppReducerActionsType, setAppErrorAC, setAppStatusAC} from \"../state/appReducer\";\r\nimport {BaseResponseType} from \"../api/it-inc-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const handleResolveWithServerErrorMessage = <T>(data: BaseResponseType<T>, dispatch: Dispatch<AppReducerActionsType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\nexport const handleReject = (error: AxiosError, dispatch: Dispatch<AppReducerActionsType>) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {backendAPI, ServerResultCodes, TodoListOnServerType} from \"../api/it-inc-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppReducerActionsType, EntityStatusType, setAppStatusAC,} from \"./appReducer\";\r\nimport {\r\n    handleReject,\r\n    handleResolveWithServerErrorMessage\r\n} from \"../utils/backendErrorHandler\";\r\n\r\n\r\nexport type TasksFilterType = 'all' | 'completed' | 'active'\r\n\r\nexport type TodoListInAppType = TodoListOnServerType & {\r\n    activeFilter: TasksFilterType\r\n    entityStatus: EntityStatusType\r\n}\r\n\r\nlet initialState: Array<TodoListInAppType> = []\r\n\r\n\r\nexport const listsActionsReducer = (state: Array<TodoListInAppType> = initialState, action: ListsActionsType): Array<TodoListInAppType> => {\r\n    switch (action.type) {\r\n        case 'ADD-LIST': {\r\n            const newInAppList: TodoListInAppType = {\r\n                ...action.payload.todoList,\r\n                activeFilter: 'all',\r\n                entityStatus: 'idle'\r\n            }\r\n            return [newInAppList, ...state]\r\n        }\r\n        case 'REMOVE-LIST':\r\n            return state.filter(list => list.id !== action.payload.listID)\r\n        case 'CHANGE-FILTER':\r\n            return state.map(list => list.id === action.payload.listID ? {\r\n                ...list,\r\n                activeFilter: action.payload.activeFilter\r\n            } : list)\r\n        case 'CHANGE-LIST-NAME':\r\n            return state.map(list => list.id === action.payload.listID ? {\r\n                ...list,\r\n                title: action.payload.newName\r\n            } : list)\r\n        case 'SET-LISTS':\r\n            return action.payload.lists.map(list => ({\r\n                ...list,\r\n                activeFilter: 'all',\r\n                entityStatus: 'idle'\r\n            }))\r\n        case \"SET-LIST-STATUS\":\r\n            return state.map(list => list.id === action.payload.listID ? {\r\n                ...list,\r\n                entityStatus: action.payload.entityStatus\r\n            } : list)\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\n\r\ntype ListsActionsType =\r\n    ReturnType<typeof addListAC>\r\n    | ReturnType<typeof removeListAC>\r\n    | ReturnType<typeof changeFilterAC>\r\n    | ReturnType<typeof changeListNameAC>\r\n    | ReturnType<typeof setListsAC>\r\n    | ReturnType<typeof setListStatusAC>\r\n    | AppReducerActionsType\r\n\r\nexport type RemoveListActionType = ReturnType<typeof removeListAC>\r\nexport const removeListAC = (listID: string) => {\r\n    return {\r\n        type: 'REMOVE-LIST',\r\n        payload: {\r\n            listID: listID,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type AddListActionType = ReturnType<typeof addListAC>\r\nexport const addListAC = (todoList: TodoListOnServerType) => {\r\n    return {\r\n        type: 'ADD-LIST',\r\n        payload: {\r\n            todoList,\r\n        },\r\n    } as const\r\n}\r\n\r\n// type ChangeFilterActionType = ReturnType<typeof changeFilterAC>\r\nexport const changeFilterAC = (listID: string, filter: TasksFilterType) => {\r\n    return {\r\n        type: 'CHANGE-FILTER',\r\n        payload: {\r\n            listID: listID,\r\n            activeFilter: filter\r\n        }\r\n    } as const\r\n}\r\n\r\n// type ChangeListNameActionType = ReturnType<typeof changeListNameAC>\r\nexport const changeListNameAC = (listID: string, newName: string) => {\r\n    return {\r\n        type: 'CHANGE-LIST-NAME',\r\n        payload: {\r\n            listID,\r\n            newName,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type setListsActionType = ReturnType<typeof setListsAC>\r\nexport const setListsAC = (lists: Array<TodoListOnServerType>) => {\r\n    return {\r\n        type: 'SET-LISTS',\r\n        payload: {\r\n            lists,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type setListStatusActionType = ReturnType<typeof setListStatusAC>\r\nexport const setListStatusAC = (listID: string, newStatus: EntityStatusType) => {\r\n    return {\r\n        type: 'SET-LIST-STATUS',\r\n        payload: {\r\n            listID,\r\n            entityStatus: newStatus,\r\n        },\r\n    } as const\r\n}\r\n\r\n\r\nexport const fetchListsTC = () => {\r\n    return (dispatch: Dispatch<ListsActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        backendAPI.getTodoLists()\r\n            .then(response => {\r\n                dispatch(setListsAC(response.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeListTC = (listID: string) => {\r\n    return (dispatch: Dispatch<ListsActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setListStatusAC(listID, 'loading'))\r\n        backendAPI.deleteTodoList(listID)\r\n            .then(response => {\r\n                if(response.data.resultCode === ServerResultCodes.success){\r\n                    dispatch(removeListAC(listID))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(setListStatusAC(listID, 'idle'))\r\n                } else{\r\n                    handleResolveWithServerErrorMessage(response.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const addListTC = (name: string) => {\r\n    return (dispatch: Dispatch<ListsActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        backendAPI.createTodoList(name)\r\n            .then(response => {\r\n                if(response.data.resultCode === ServerResultCodes.success){\r\n                    dispatch(addListAC(response.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleResolveWithServerErrorMessage<{item: TodoListOnServerType}>(response.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeListNameTC = (listID: string, newName: string) => {\r\n    return (dispatch: Dispatch<ListsActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setListStatusAC(listID, 'loading'))\r\n        backendAPI.updateTodoList(listID, newName)\r\n            .then(response => {\r\n                if(response.data.resultCode===ServerResultCodes.success){\r\n                    dispatch(changeListNameAC(listID, newName))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(setListStatusAC(listID, 'idle'))\r\n                } else{\r\n                    handleResolveWithServerErrorMessage(response.data, dispatch)\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}","import {\r\n    AddListActionType,\r\n    RemoveListActionType,\r\n    setListsActionType\r\n} from \"./listsActionsReducer\";\r\nimport {\r\n    backendAPI,\r\n    ServerResultCodes,\r\n    taskPutRequestBodyType,\r\n    TaskType\r\n} from \"../api/it-inc-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"./store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./appReducer\";\r\nimport {\r\n    handleReject,\r\n    handleResolveWithServerErrorMessage\r\n} from \"../utils/backendErrorHandler\";\r\n\r\n\r\nlet initialState: TasksListType = {}\r\n\r\nexport type TasksListType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport const tasksActionsReducer = (state: TasksListType = initialState, action: TasksActionsType): TasksListType => {\r\n    switch (action.type) {\r\n\r\n        case 'ADD-TASK':\r\n            // action.payload.task.todoListId - where should I get the value ?\r\n            //new task always on top after app reload - is it server determined?\r\n            return {\r\n                ...state,\r\n                [action.payload.listID]: [action.payload.task, ...state[action.payload.listID]]\r\n            }\r\n\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.listID]: state[action.payload.listID].filter(task => task.id !== action.payload.taskID)\r\n            }\r\n\r\n        case \"UPDATE-TASK-DATA\":\r\n            return {\r\n                ...state, [action.payload.listID]: state[action.payload.listID]\r\n                    .map(task => task.id === action.payload.taskID ? {...task, ...action.payload.newData} : task)\r\n            }\r\n\r\n        // case 'ADD-LIST':\r\n        //     return {...state, [action.payload.todoList.id]: []}\r\n\r\n        case 'REMOVE-LIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.payload.listID]\r\n            return stateCopy\r\n        }\r\n        //I've used (tasks || []).map... expression in Todolist JSX, so there's no need in setting empty arrays in this reducer\r\n        // case \"SET-LISTS\":\r\n        //     const stateCopy = {...state}\r\n        //     action.payload.lists.forEach(list => {\r\n        //         stateCopy[list.id] = []\r\n        //     })\r\n        //     return stateCopy\r\n\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.payload.todoListID]: action.payload.tasks}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype TasksActionsType =\r\n    AddTaskActionType\r\n    | RemoveTaskActionType\r\n    | AddListActionType\r\n    | RemoveListActionType\r\n    | setListsActionType\r\n    | setTasksActionType\r\n    | UpdateTaskDataActionType\r\n\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\n\r\nexport const addTaskAC = (listID: string, task: TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            listID,\r\n            task,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\n\r\nexport const removeTaskAC = (listID: string, taskID: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            listID: listID,\r\n            taskID: taskID,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype UpdateTaskDataActionType = ReturnType<typeof updateTaskDataAC>\r\n\r\nexport const updateTaskDataAC = (listID: string, taskID: string, newData: UpdateTaskDataType) => {\r\n    return {\r\n        type: 'UPDATE-TASK-DATA',\r\n        payload: {\r\n            listID,\r\n            taskID,\r\n            newData,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype setTasksActionType = ReturnType<typeof setTasksAC>\r\n\r\nexport const setTasksAC = (todoListID: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        payload: {\r\n            todoListID,\r\n            tasks,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport const fetchTasksTC = (todoListID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        backendAPI.getTasks(todoListID)\r\n            .then(response => {\r\n                dispatch(setTasksAC(todoListID, response.data.items))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const removeTaskTC = (listID: string, taskID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        backendAPI.deleteTask(listID, taskID)\r\n            .then(response => {\r\n                dispatch(removeTaskAC(listID, taskID))\r\n            })\r\n            .catch(error => {\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (listID: string, taskName: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        backendAPI.createTask(listID, taskName)\r\n            .then(response => {\r\n                if (response.data.resultCode === ServerResultCodes.success) {\r\n                    dispatch(addTaskAC(listID, response.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleResolveWithServerErrorMessage<{item: TaskType}>(response.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// export type UpdateTaskDataType = {\r\n//     title?: string\r\n//     description?: string\r\n//     status?: TaskStatus\r\n//     priority?: TaskPriority\r\n//     startDate?: string\r\n//     deadline?: string\r\n// }\r\n//\"partial\" makes all properties optional, so we get the same result as UpdateTaskDataType above\r\n//no need to create one more data type\r\ntype UpdateTaskDataType = Partial<taskPutRequestBodyType>\r\n\r\nexport const updateTaskTC = (listID: string, taskID: string, newTaskData: UpdateTaskDataType) => {\r\n\r\n    return (dispatch: Dispatch, getState: () => RootStateType) => {\r\n        const currentState = getState()\r\n        const taskToBeChanged = currentState.tasks[listID].find(task => task.id === taskID)\r\n\r\n        if (!taskToBeChanged) {\r\n            console.warn(`task with id ${taskID} not found in todo list ${listID}`)\r\n            return\r\n        }\r\n\r\n        const requestPayload: taskPutRequestBodyType = {\r\n            deadline: taskToBeChanged.deadline,\r\n            description: taskToBeChanged.description,\r\n            priority: taskToBeChanged.priority,\r\n            startDate: taskToBeChanged.startDate,\r\n            status: taskToBeChanged.status,\r\n            title: taskToBeChanged.title,\r\n            ...newTaskData,\r\n        }\r\n\r\n        // type TodoPreview = Omit<Todo, \"addedDate\">;\r\n        // type TodoPreview = Pick<TaskType, \"deadline\" | \"description\" | \"priority\" | \"startDate\" | \"status\"  |\"title\">\r\n        //is there a way to \"filter\" task properties and create object for put request body automatically?\r\n        //let clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));\r\n        // debugger\r\n\r\n        backendAPI.updateTask(listID, taskID, requestPayload)\r\n            .then(response => {\r\n                if (response.data.resultCode === ServerResultCodes.success) {\r\n                    dispatch(updateTaskDataAC(listID, taskID, newTaskData))\r\n                } else {\r\n                    handleResolveWithServerErrorMessage(response.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppErrorAC(error.message))\r\n            })\r\n    }\r\n}","import {tasksActionsReducer} from \"./tasksActionsReducer\";\r\nimport {listsActionsReducer} from \"./listsActionsReducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./appReducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksActionsReducer,\r\n    lists: listsActionsReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n//useSelector which has store RootStateType\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {useCallback, useState} from 'react';\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    disabled?: boolean\r\n    itemName: string\r\n    itemNameChangedCallback: (newName: string) => void\r\n}\r\n\r\n\r\nexport const EditableSpan = React.memo(({disabled = false, ...props}: EditableSpanPropsType) => {\r\n    console.log(`editableSpan was called, text: ${props.itemName}`)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputText, setInputText] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const itemDoubleClickHandler = () => {\r\n        if(disabled) return\r\n        setEditMode(true)\r\n        setInputText(props.itemName)\r\n    }\r\n\r\n    const inputChangeHandler = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setInputText(event.currentTarget.value)\r\n    }, [])\r\n\r\n    const saveNewName = useCallback(() => {\r\n        const cleanInputText = inputText.trim()\r\n        if (cleanInputText) {\r\n            setEditMode(false)\r\n            props.itemNameChangedCallback(cleanInputText)\r\n            setInputText(props.itemName)\r\n        } else {\r\n            setInputText('')\r\n            setError(true)\r\n        }\r\n\r\n    }, [inputText])\r\n\r\n    const enterPressHandler = useCallback((event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            saveNewName()\r\n        }\r\n    }, [saveNewName])\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                // disabled={disabled}\r\n                error={Boolean(error)}\r\n                helperText={error}\r\n                onKeyPress={enterPressHandler}\r\n                autoFocus={true}\r\n                onBlur={saveNewName}\r\n                value={inputText}\r\n                onChange={inputChangeHandler}\r\n            /> :\r\n            <span\r\n                onDoubleClick={itemDoubleClickHandler}>{props.itemName}\r\n            </span>\r\n\r\n    );\r\n});\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport  IconButton from \"@material-ui/core/IconButton\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport Backspace from \"@material-ui/icons/Backspace\";\r\nimport styled from \"styled-components\";\r\nimport {TaskStatus} from \"../api/it-inc-api\";\r\n\r\ntype TaskPropsType = {\r\n    // listID: string\r\n    taskID: string\r\n    taskName: string\r\n    isDone: boolean\r\n    changeStatus: (taskID:string, newStatus: TaskStatus) => void\r\n    changeName: (taskID: string, newName: string) => void\r\n    removeTask: (taskID: string) => void\r\n\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    console.log(`Task was called, title: ${props.taskName}`)\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    const changeStatus = useCallback((event)=>{\r\n        const newTaskStatus = event.currentTarget.checked ? TaskStatus.Completed : TaskStatus.New\r\n        props.changeStatus(props.taskID, newTaskStatus)\r\n    },[props.changeStatus, props.taskID])\r\n\r\n    const changeName = useCallback((newName: string)=>{\r\n        props.changeName(props.taskID, newName)\r\n    },[props.changeName, props.taskID])\r\n\r\n    const removeTask = useCallback(()=>{\r\n        props.removeTask(props.taskID)\r\n    },[props.removeTask, props.taskID])\r\n\r\n    return <>\r\n        <TaskNameWithCheckboxWrapper>\r\n            <Checkbox checked={props.isDone}\r\n                      color={\"primary\"}\r\n                      onChange={changeStatus}/>\r\n            <EditableSpan itemName={props.taskName}\r\n                          itemNameChangedCallback={changeName}/>\r\n        </TaskNameWithCheckboxWrapper>\r\n\r\n        <IconButton size={\"small\"}\r\n            // variant={\"contained\"}\r\n                    onClick={removeTask}><Backspace\r\n            color={\"primary\"}\r\n        /></IconButton>\r\n    </>\r\n})\r\n\r\nconst TaskNameWithCheckboxWrapper = styled.div`\r\n  //min-width: 260px;\r\n  //border-bottom: 2px solid gray;\r\n`","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n// import {Button, IconButton, List, ListItem} from \"@material-ui/core\";\r\n//tree-shaking is working out of the box??\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Delete from \"@material-ui/icons/Delete\";\r\nimport styled from \"styled-components\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../state/store\";\r\nimport {addTaskTC, fetchTasksTC, removeTaskTC, updateTaskTC} from \"../state/tasksActionsReducer\";\r\nimport {changeFilterAC, changeListNameTC, removeListTC, TasksFilterType} from \"../state/listsActionsReducer\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatus, TaskType} from \"../api/it-inc-api\";\r\nimport {EntityStatusType} from \"../state/appReducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    demo?: boolean\r\n    listStatus: EntityStatusType\r\n    todolistID: string\r\n    title: string\r\n    activeFilter: TasksFilterType\r\n}\r\n\r\n\r\nconst TodolistCard = styled.div`\r\n  min-width: 300px;\r\n`\r\n\r\nconst FilterButtonsWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding-right: 0;\r\n`\r\n\r\n\r\nexport const Todolist = React.memo(({demo = false, listStatus, ...props}: TodolistPropsType) => {\r\n    console.log(`todolist was called, title: ${props.title}`)\r\n    const tasks = useSelector<RootStateType, Array<TaskType>>(state => state.tasks[props.todolistID])\r\n    // const listStatus = useSelector<RootStateType, EntityStatusType>(state => state.lists.)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        if(demo) return\r\n        dispatch(fetchTasksTC(props.todolistID))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    let filteredTasks = tasks\r\n    if (props.activeFilter === 'active') {\r\n        filteredTasks = tasks.filter(task => task.status===TaskStatus.New)\r\n    }\r\n    if (props.activeFilter === 'completed') {\r\n        filteredTasks = tasks.filter(task => task.status===TaskStatus.Completed)\r\n    }\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, newStatus: TaskStatus) => {\r\n        dispatch(updateTaskTC(props.todolistID, taskID, {status: newStatus}))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const addTask = useCallback((name: string) => {\r\n        dispatch(addTaskTC(props.todolistID, name))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const removeTask = useCallback((taskID: string) => {\r\n        dispatch(removeTaskTC(props.todolistID, taskID))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const changeFilter = useCallback((newFilterValue: TasksFilterType) => {\r\n        dispatch(changeFilterAC(props.todolistID, newFilterValue))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const deleteTodolist = useCallback(() => {\r\n        let action = removeListTC(props.todolistID)\r\n        dispatch(action)\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const changeTaskName = useCallback((taskID: string, newName: string) => {\r\n        dispatch(updateTaskTC(props.todolistID, taskID, {title: newName}))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const changeListName = useCallback((newName: string) => {\r\n        dispatch(changeListNameTC(props.todolistID, newName))\r\n    }, [dispatch, props.todolistID])\r\n\r\n\r\n    return (\r\n        <TodolistCard>\r\n            <h3>\r\n                <EditableSpan itemName={props.title} itemNameChangedCallback={changeListName}/>\r\n                <IconButton disabled={listStatus === 'loading'} onClick={deleteTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm disabled={listStatus==='loading'} addItemCallback={addTask}/>\r\n            <List disablePadding>\r\n                {\r\n                    (filteredTasks || []).map(task =>\r\n                        <ListItem disableGutters key={task.id}\r\n                                  style={{justifyContent: \"space-between\"}}\r\n                        >\r\n                            <Task taskID={task.id}\r\n                                  isDone={task.status === TaskStatus.Completed}\r\n                                  changeName={changeTaskName}\r\n                                  taskName={task.title}\r\n                                  changeStatus={changeTaskStatus}\r\n                                  removeTask={removeTask}\r\n                            />\r\n                        </ListItem>)\r\n\r\n                }\r\n                {/*< Divider variant=\"inset\" component=\"li\"/>*/}\r\n            </List>\r\n            <FilterButtonsWrapper>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"all\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('all')}>All\r\n                </Button>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"active\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('active')}>Active\r\n                </Button>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"completed\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('completed')}>Completed\r\n                </Button>\r\n            </FilterButtonsWrapper>\r\n\r\n        </TodolistCard>\r\n    )\r\n})\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../state/store\";\r\nimport {setAppErrorAC} from \"../state/appReducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useAppSelector<string | null>(state => state.app.error)\r\n    const isOpen = (error !== null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n\r\n    return (\r\n\r\n        <Snackbar open={isOpen} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error && error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addListTC, fetchListsTC, TodoListInAppType} from \"./state/listsActionsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType, useAppSelector} from \"./state/store\";\r\nimport {Todolist} from \"./components/Todolist\";\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar\";\r\nimport {EntityStatusType} from \"./state/appReducer\";\r\n\r\n\r\ntype AppPropsType = {\r\n   demo?: boolean\r\n}\r\n\r\n\r\nexport const App = ({demo = false, ...props}: AppPropsType) => {\r\n    console.log(\"app was called\")\r\n    // const todolists = useSelector<RootStateType, TodoListInAppType[]>(state => state.lists);\r\n    const todolists = useAppSelector<TodoListInAppType[]>(state => state.lists);\r\n    const appStatus = useSelector<RootStateType, EntityStatusType>(state => state.app.appStatus)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(()=>{\r\n        if(demo) return\r\n        dispatch(fetchListsTC())\r\n    },[dispatch, demo])\r\n\r\n    const addTodolist = useCallback((listName: string) => {\r\n        if (listName) {\r\n            dispatch(addListTC(listName))\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n                {appStatus === 'loading' && < LinearProgress style={{position:\"absolute\", top: \"800px\"}} color=\"secondary\"/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{paddingTop: \"20px\"}}>\r\n                    <AddItemForm addItemCallback={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(list => {\r\n                            return (\r\n                                <Grid item key={list.id}>\r\n                                    <Paper style={{padding: \"20px\"}} elevation={10}>\r\n                                        <Todolist\r\n                                            demo={demo}\r\n                                            listStatus={list.entityStatus}\r\n                                            todolistID={list.id}\r\n                                            title={list.title}\r\n                                            activeFilter={list.activeFilter}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}