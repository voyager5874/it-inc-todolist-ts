{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","state/listsActionsReducer.ts","state/tasksActionsReducer.ts","Todolist.tsx","App.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["AddItemFormWrapper","styled","div","AddItemForm","props","useState","inputText","setInputText","inputError","setInputError","addItem","trim","addItemCallback","TextField","label","size","variant","value","error","onChange","event","currentTarget","onKeyPress","key","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","setError","saveNewName","cleanInputText","itemNameChangedCallback","itemName","Boolean","helperText","autoFocus","onBlur","onDoubleClick","todolistID1","v1","todolistID2","initialState","id","title","activeFilter","isDone","TodolistCard","FilterButtonsWrapper","TaskNameWithCheckboxWrapper","Todolist","tasks","useSelector","state","todolistID","dispatch","useDispatch","changeFilter","newFilterValue","type","payload","listID","newName","changeListNameAC","changeListName","action","Delete","taskName","name","addTask","List","disablePadding","filter","task","map","ListItem","disableGutters","style","justifyContent","Checkbox","checked","color","taskID","newStatus","changeTaskStatusAC","changeTaskNameAC","changeTaskName","removeTaskAC","Backspace","Button","App","todolists","lists","addTodolist","listName","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","paddingTop","spacing","list","item","Paper","padding","elevation","window","location","hostname","match","rootReducer","combineReducers","stateCopy","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7e20b91a.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport styled from \"styled-components\";\r\n\r\ntype addItemFormPropsType = {\r\n    addItemCallback: (itemName: string) => void\r\n}\r\nconst AddItemFormWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-bottom: 20px;\r\n`\r\n\r\n\r\nexport const AddItemForm = (props: addItemFormPropsType) => {\r\n    const [inputText, setInputText] = useState<string>('')\r\n    const [inputError, setInputError] = useState<boolean>(false)\r\n\r\n    const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputError(false)\r\n        setInputText(event.currentTarget.value)\r\n    }\r\n    const addItem = () => {\r\n        if (inputText.trim()) {\r\n            props.addItemCallback(inputText.trim())\r\n        } else {\r\n            setInputError(true)\r\n        }\r\n        setInputText('')\r\n    }\r\n\r\n    const keyPressWithinInputHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <AddItemFormWrapper>\r\n            <TextField\r\n                label={inputError ? 'give it a name' : 'Title'}\r\n                size={\"small\"}\r\n                variant={\"outlined\"}\r\n                value={inputText}\r\n                error={inputError}\r\n                onChange={inputChangeHandler}\r\n                onKeyPress={keyPressWithinInputHandler}/>\r\n            <IconButton onClick={addItem}><AddBox/></IconButton>\r\n        </AddItemFormWrapper>\r\n    );\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    itemName: string\r\n    itemNameChangedCallback: (newName: string) => void\r\n}\r\n\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputText, setInputText] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const itemDoubleClickHandler = () => {\r\n        setEditMode(true)\r\n        setInputText(props.itemName)\r\n    }\r\n\r\n    const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setInputText(event.currentTarget.value)\r\n    }\r\n\r\n    const saveNewName = () => {\r\n        const cleanInputText = inputText.trim()\r\n        if (cleanInputText) {\r\n            setEditMode(false)\r\n            props.itemNameChangedCallback(cleanInputText)\r\n            setInputText(props.itemName)\r\n        } else {\r\n            setInputText('')\r\n            setError(true)\r\n        }\r\n\r\n    }\r\n\r\n    const enterPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            saveNewName()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                error={Boolean(error)}\r\n                helperText={error}\r\n                onKeyPress={enterPressHandler}\r\n                autoFocus={true}\r\n                onBlur={saveNewName}\r\n                value={inputText}\r\n                onChange={inputChangeHandler}\r\n            /> :\r\n            <span\r\n                onDoubleClick={itemDoubleClickHandler}>{props.itemName}\r\n            </span>\r\n\r\n    );\r\n};\r\n\r\n","import {TasksFilterType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n// let initialState: Array<TodolistType> = []\r\n\r\nexport const todolistID1 = v1()\r\nexport const todolistID2 = v1()\r\nlet initialState: Array<TodolistType> = [\r\n    {id: todolistID1, title: \"What  to learn\", activeFilter: 'all'},\r\n    {id: todolistID2, title: \"What  to buy\", activeFilter: 'all'},\r\n]\r\n\r\nexport const listsActionsReducer = (state: Array<TodolistType> = initialState, action: ListsActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'ADD-LIST':\r\n            return [...state, {id: action.payload.listID, title: action.payload.name, activeFilter: 'all'}]\r\n        case 'REMOVE-LIST':\r\n            return state.filter(list => list.id !== action.payload.listID)\r\n        case 'CHANGE-FILTER':\r\n            return state.map(list => list.id === action.payload.listID ? {\r\n                ...list,\r\n                activeFilter: action.payload.activeFilter\r\n            } : list)\r\n        case 'CHANGE-LIST-NAME':\r\n            return state.map(list => list.id === action.payload.listID ? {\r\n                ...list,\r\n                title: action.payload.newName\r\n            } : list)\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\n\r\ntype ListsActionsType = AddListActionType | RemoveListActionType | ChangeFilterActionType | ChangeListNameActionType\r\n\r\nexport type RemoveListActionType = ReturnType<typeof removeListAC>\r\nexport const removeListAC = (listID: string) => {\r\n    return {\r\n        type: 'REMOVE-LIST',\r\n        payload: {\r\n            listID: listID,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type AddListActionType = ReturnType<typeof addListAC>\r\nexport const addListAC = (name: string) => {\r\n    return {\r\n        type: 'ADD-LIST',\r\n        payload: {\r\n            name: name,\r\n            listID: v1(),\r\n        },\r\n    } as const\r\n}\r\n\r\ntype ChangeFilterActionType = ReturnType<typeof changeFilterAC>\r\nexport const changeFilterAC = (listID: string, filter: TasksFilterType) => {\r\n    return {\r\n        type: 'CHANGE-FILTER',\r\n        payload: {\r\n            listID: listID,\r\n            activeFilter: filter\r\n        }\r\n    } as const\r\n}\r\n\r\ntype ChangeListNameActionType = ReturnType<typeof changeListNameAC>\r\nexport const changeListNameAC = (listID: string, newName: string) => {\r\n    return {\r\n        type: 'CHANGE-LIST-NAME',\r\n        payload: {\r\n            listID,\r\n            newName,\r\n        },\r\n    } as const\r\n}","import {v1} from \"uuid\";\r\nimport {TasksListType} from \"../App\";\r\nimport {AddListActionType, RemoveListActionType, todolistID1, todolistID2} from \"./listsActionsReducer\";\r\n\r\n\r\n// let initialState: TasksListType = {}\r\n\r\nlet initialState: TasksListType = {\r\n    [todolistID1]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS/TS\", isDone: true},\r\n        {id: v1(), title: \"React\", isDone: false},\r\n        {id: v1(), title: \"Redux\", isDone: false},\r\n    ],\r\n    [todolistID2]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS/TS\", isDone: true},\r\n        {id: v1(), title: \"React\", isDone: false},\r\n        {id: v1(), title: \"Redux\", isDone: false},\r\n    ]\r\n}\r\n\r\nexport const tasksActionsReducer = (state: TasksListType = initialState, action: TasksActionsType): TasksListType => {\r\n    switch (action.type) {\r\n\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.listID]: [...state[action.payload.listID], {\r\n                    id: v1(),\r\n                    title: action.payload.title,\r\n                    isDone: false,\r\n                }]\r\n            }\r\n\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.listID]: state[action.payload.listID].filter(task => task.id !== action.payload.taskID)\r\n            }\r\n\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.payload.listID]: state[action.payload.listID].map(task => task.id === action.payload.taskID ? {\r\n                    ...task,\r\n                    isDone: action.payload.isDone\r\n                } : task)\r\n            }\r\n\r\n        case 'ADD-LIST':\r\n            return {...state, [action.payload.listID]: []}\r\n\r\n        case 'REMOVE-LIST': {\r\n            debugger\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.payload.listID]\r\n            return stateCopy\r\n        }\r\n\r\n        case 'CHANGE-TASK-NAME':\r\n            return {\r\n                ...state,\r\n                [action.payload.listID]: state[action.payload.listID].map(task => task.id === action.payload.taskID ? {\r\n                    ...task,\r\n                    title: action.payload.newName\r\n                } : task)\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype TasksActionsType =\r\n    AddTaskActionType\r\n    | RemoveTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskNameActionType\r\n    | AddListActionType\r\n    | RemoveListActionType\r\n\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\n\r\nexport const addTaskAC = (listID: string, title: string) => {\r\n    //preparation code\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            title: title,\r\n            listID: listID,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\n\r\nexport const removeTaskAC = (listID: string, taskID: string) => {\r\n    //preparation code\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            listID: listID,\r\n            taskID: taskID,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\n\r\nexport const changeTaskStatusAC = (listID: string, taskID: string, newStatus: boolean) => {\r\n    //preparation code\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        payload: {\r\n            listID: listID,\r\n            taskID: taskID,\r\n            isDone: newStatus,\r\n        }\r\n    } as const\r\n}\r\n\r\n\r\ntype ChangeTaskNameActionType = ReturnType<typeof changeTaskNameAC>\r\n\r\nexport const changeTaskNameAC = (listID: string, taskID: string, newName: string) => {\r\n    //preparation code\r\n    return {\r\n        type: 'CHANGE-TASK-NAME',\r\n        payload: {\r\n            listID,\r\n            taskID,\r\n            newName,\r\n        }\r\n    } as const\r\n}\r\n","import React from \"react\";\r\nimport {TasksFilterType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport {Backspace, Delete} from \"@material-ui/icons\";\r\nimport styled from \"styled-components\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./state/store\";\r\nimport {addTaskAC, changeTaskNameAC, changeTaskStatusAC, removeTaskAC} from \"./state/tasksActionsReducer\";\r\nimport {changeFilterAC, changeListNameAC, removeListAC} from \"./state/listsActionsReducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype TodolistPropsType = {\r\n    todolistID: string\r\n    title: string\r\n    activeFilter: TasksFilterType\r\n}\r\n\r\n// const StyledListItem = styled(ListItem)`\r\n//\r\n//   display: flex;\r\n//   justify-content: space-between;\r\n//   border: 1px solid blue;\r\n// `\r\n\r\n// const StyledListItem = styled(List)`\r\n//   & .MuiListItem-root: {\r\n//   \"justify-content: space-between;\"\r\n//   }\r\n//\r\n// `\r\n\r\n\r\nconst TodolistCard = styled.div`\r\n  min-width: 300px;\r\n`\r\n\r\nconst FilterButtonsWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding-right: 0;\r\n`\r\n\r\nconst TaskNameWithCheckboxWrapper = styled.div`\r\n  //min-width: 260px;\r\n  //border-bottom: 2px solid gray;\r\n`\r\n\r\nexport const Todolist = (props: TodolistPropsType) => {\r\n\r\n    const tasks = useSelector<RootStateType, Array<TaskType>>(state => state.tasks[props.todolistID])\r\n    const dispatch = useDispatch()\r\n\r\n    const changeTaskStatus = (taskID: string, newStatus: boolean) => {\r\n        dispatch(changeTaskStatusAC(props.todolistID, taskID, newStatus))\r\n    }\r\n\r\n    const getFilteredTasks = () => {\r\n        if (props.activeFilter === 'active') {\r\n            return tasks.filter(task => !task.isDone)\r\n        }\r\n        if (props.activeFilter === 'completed') {\r\n            return tasks.filter(task => task.isDone)\r\n        }\r\n        return tasks\r\n    }\r\n\r\n    const addTask = (name: string) => {\r\n        dispatch(addTaskAC(props.todolistID, name))\r\n    }\r\n\r\n    const removeTask = (taskID: string) => {\r\n        dispatch(removeTaskAC(props.todolistID, taskID))\r\n    }\r\n\r\n    const changeFilter = (newFilterValue: TasksFilterType) => {\r\n        dispatch(changeFilterAC(props.todolistID, newFilterValue))\r\n    }\r\n\r\n    const deleteTodolist = () => {\r\n        let action = removeListAC(props.todolistID)\r\n        dispatch(action)\r\n    }\r\n\r\n    const changeTaskName = (taskID: string, newName: string) => {\r\n        dispatch(changeTaskNameAC(props.todolistID, taskID, newName))\r\n    }\r\n\r\n    const changeListName = (newName: string) => {\r\n        dispatch(changeListNameAC(props.todolistID, newName))\r\n    }\r\n\r\n\r\n    return (\r\n        <TodolistCard>\r\n            <h3>\r\n                <EditableSpan itemName={props.title} itemNameChangedCallback={(newName) => changeListName(newName)}/>\r\n                <IconButton onClick={deleteTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItemCallback={(taskName) => addTask(taskName)}/>\r\n            <List disablePadding>\r\n                {\r\n                    getFilteredTasks().map(task =>\r\n                        <ListItem disableGutters key={task.id}\r\n                                  style={{justifyContent: \"space-between\"}}\r\n                        >\r\n                            <TaskNameWithCheckboxWrapper>\r\n                                <Checkbox checked={task.isDone}\r\n                                          color={\"primary\"}\r\n                                          onChange={(event) => changeTaskStatus(task.id, event.currentTarget.checked)}/>\r\n                                <EditableSpan itemName={task.title}\r\n                                              itemNameChangedCallback={(newName) => changeTaskName(task.id, newName)}/>\r\n                            </TaskNameWithCheckboxWrapper>\r\n\r\n                            <IconButton size={\"small\"}\r\n                                // variant={\"contained\"}\r\n                                        onClick={() => removeTask(task.id)}><Backspace\r\n                                color={\"primary\"}\r\n                            /></IconButton>\r\n                        </ListItem>)\r\n\r\n                }\r\n                {/*< Divider variant=\"inset\" component=\"li\"/>*/}\r\n            </List>\r\n            <FilterButtonsWrapper>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"all\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('all')}>All\r\n                </Button>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"active\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('active')}>Active\r\n                </Button>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"completed\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('completed')}>Completed\r\n                </Button>\r\n            </FilterButtonsWrapper>\r\n\r\n        </TodolistCard>\r\n    )\r\n}","import React from 'react';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addListAC} from \"./state/listsActionsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./state/store\";\r\n\r\nexport type TasksFilterType = 'all' | 'completed' | 'active';\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    activeFilter: TasksFilterType\r\n}\r\nexport type TasksListType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport const App = () => {\r\n\r\n    const todolists = useSelector<RootStateType, TodolistType[]>(state => state.lists);\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodolist = (listName: string) => {\r\n        if (listName) {\r\n            let action = addListAC(listName)\r\n            dispatch(action)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{paddingTop: \"20px\"}}>\r\n                    <AddItemForm addItemCallback={(listName) => addTodolist(listName)}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(list => {\r\n                            return (\r\n                                <Grid item key={list.id}>\r\n                                    <Paper style={{padding: \"20px\"}} elevation={10}>\r\n                                        <Todolist\r\n                                            todolistID={list.id}\r\n                                            title={list.title}\r\n                                            activeFilter={list.activeFilter}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {tasksActionsReducer} from \"./tasksActionsReducer\";\r\nimport {listsActionsReducer} from \"./listsActionsReducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksActionsReducer,\r\n    lists: listsActionsReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}