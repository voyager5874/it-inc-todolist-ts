{"version":3,"sources":["components/assets/page404png.png","serviceWorker.ts","state/actions/enums/index.ts","state/actions/app.ts","api/types/index.ts","utils/handleBackendResponseErrors.ts","utils/getCleanString.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","api/config/index.ts","api/appDataAPI.ts","api/authAPI.ts","state/actions/lists.ts","state/reducers/tasksActionsReducer.ts","state/middlewares/tasks.ts","state/actions/tasks.ts","state/selectors/getAppStatus.ts","state/selectors/getAppInitializationState.ts","state/selectors/getAuthState.ts","components/Todolist.tsx","state/selectors/selectTodoListTasks.ts","state/middlewares/lists.ts","state/reducers/appReducer.ts","state/reducers/listsActionsReducer.ts","state/reducers/authReducer.ts","state/store.ts","components/AllTodoLists.tsx","components/ErrorSnackbar.tsx","components/Login.tsx","state/middlewares/login.ts","components/Page404.tsx","state/middlewares/app.ts","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","APP_ACTIONS_TYPE","TaskStatus","TaskPriority","ServerResultCodes","setAppErrorAC","errorMessage","type","APP_SET_ERROR","error","setAppStatusAC","newStatus","APP_SET_STATUS","status","handleResolveWithServerErrorMessage","data","dispatch","messages","length","handleReject","message","getCleanString","text","trim","AddItemFormWrapper","styled","div","AddItemForm","memo","disabled","props","useState","textFieldContent","setTextFieldContent","setError","addItem","title","addItemCallback","TextField","label","size","variant","value","onChange","event","currentTarget","onKeyPress","key","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","saveNewName","itemNameChangedCallback","itemName","onEnterKeyPress","useCallback","helperText","autoFocus","onBlur","onDoubleClick","TaskNameWithCheckboxWrapper","Task","changeStatus","newTaskStatus","checked","Completed","New","taskID","changeName","newName","removeTask","Checkbox","isDone","color","taskName","axiosInstance","axios","create","baseURL","process","withCredentials","headers","appDataAPI","todolistId","put","delete","name","post","get","todolistID","requestPayload","authAPI","authData","setListStatusAC","listID","payload","entityStatus","initialState","updateTaskTC","newTaskData","getState","taskToBeChanged","tasks","find","task","id","deadline","description","priority","startDate","then","response","resultCode","success","newData","updateTaskDataAC","catch","console","warn","getAppStatus","state","app","appStatus","getAppInitializationState","isInitialized","getAuthState","auth","isLoggedIn","TodolistCard","FilterButtonsWrapper","Todolist","demo","listStatus","useSelector","todoListID","selectTodoListTasks","userIsLoggedIn","useDispatch","useEffect","setTasksAC","items","filteredTasks","activeFilter","filter","changeTaskStatus","addTask","addTaskAC","item","removeTaskAC","removeTaskTC","changeFilter","newFilterValue","deleteTodolist","action","removeListAC","changeTaskName","changeListName","changeListNameAC","changeListNameTC","List","disablePadding","map","ListItem","disableGutters","style","justifyContent","Button","iniAppState","iniState","setAuthStateAC","newAuthState","rootReducer","combineReducers","stateCopy","todoList","lists","forEach","list","newInAppList","APP_SET_INIT","store","createStore","applyMiddleware","thunk","useAppSelector","AllTodoLists","todolists","addTodolist","listName","Grid","container","paddingTop","spacing","Paper","padding","elevation","replace","to","Alert","ErrorSnackbar","isOpen","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","showPassword","setShowPassword","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","marginTop","minWidth","textAlign","href","FormGroup","margin","handleChange","handleBlur","touched","errors","FormControlLabel","control","Page404","display","flexDirection","alignItems","height","src","notFound","alt","initializeAppTC","newInitState","App","appIsInitialized","navigate","useNavigate","Box","sx","CircularProgress","showProgressBar","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","marginLeft","LinearProgress","Container","fixed","path","element","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0925c61a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/page404png.bc53bdbc.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export enum APP_ACTIONS_TYPE {\n  APP_SET_STATUS = 'APP/SET-STATUS',\n  APP_SET_ERROR = 'APP/SET-ERROR',\n  APP_SET_INIT = 'APP/SET-INIT',\n}\n","import { APP_ACTIONS_TYPE } from 'state/actions/enums';\nimport { EntityStatusType } from 'state/actions/types';\n\nexport const setAppErrorAC = (errorMessage: string | null) =>\n  ({\n    type: APP_ACTIONS_TYPE.APP_SET_ERROR,\n    error: errorMessage,\n  } as const);\n\nexport const setAppStatusAC = (newStatus: EntityStatusType) =>\n  ({\n    type: APP_ACTIONS_TYPE.APP_SET_STATUS,\n    status: newStatus,\n  } as const);\n\nexport const initializeAppAC = (newInitState: boolean) =>\n  ({\n    type: APP_ACTIONS_TYPE.APP_SET_INIT,\n    isInitialized: newInitState,\n  } as const);\n","import { Nullable } from 'types/Nullable';\n\nexport enum TaskStatus {\n  New,\n  InProgress,\n  Completed,\n  Draft,\n}\n\nexport enum TaskPriority {\n  Low,\n  Middle,\n  High,\n  Urgent,\n  Someday,\n}\n\nexport type TodoListOnServerType = {\n  id: string;\n  addedDate: string;\n  order: number;\n  title: string;\n};\n\nexport enum ServerResultCodes {\n  success = 0,\n  error = 1,\n  captcha = 10,\n}\n\nexport type BaseResponseType<T = {}> = {\n  resultCode: ServerResultCodes;\n  messages: Array<string>;\n  fieldsErrors: Array<string>;\n  data: T;\n};\n\nexport type GetTasksResponseDataType = {\n  error: Nullable<string>;\n  items: Array<TaskType>;\n  totalCount: number;\n};\n\nexport type AuthMeResponseDataType = {\n  id: number;\n  email: string;\n  login: string;\n};\n\nexport type taskPutRequestBodyType = {\n  title: string;\n  description: string;\n  status: TaskStatus;\n  priority: TaskPriority;\n  startDate: string;\n  deadline: string;\n};\n\nexport type TaskType = {\n  description: string;\n  title: string;\n  status: TaskStatus;\n  priority: TaskPriority;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\n\nexport type LoginRequestDataType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: string;\n};\n","import { AxiosError } from 'axios';\nimport { Dispatch } from 'redux';\n\nimport { BaseResponseType } from 'api/types';\nimport { setAppErrorAC, setAppStatusAC } from 'state/actions/app';\nimport { AppReducerActionsType } from 'state/actions/types';\n\nconst FIRST_ARRAY_ITEM = 0;\n\nexport const handleResolveWithServerErrorMessage = <T>(\n  data: BaseResponseType<T>,\n  dispatch: Dispatch<AppReducerActionsType>,\n): void => {\n  if (data.messages.length) {\n    dispatch(setAppErrorAC(data.messages[FIRST_ARRAY_ITEM]));\n  } else {\n    dispatch(setAppErrorAC('some error occurred'));\n  }\n  dispatch(setAppStatusAC('failed'));\n};\n\nexport const handleReject = (\n  error: AxiosError,\n  dispatch: Dispatch<AppReducerActionsType>,\n): void => {\n  dispatch(setAppErrorAC(error.message));\n  dispatch(setAppStatusAC('failed'));\n};\n","export const getCleanString = (text: string): string => text.trim();\n","import React, { memo, useState } from 'react';\n\nimport { IconButton, TextField } from '@material-ui/core';\nimport { AddBox } from '@material-ui/icons';\nimport styled from 'styled-components';\n\nimport { ComponentReturnType } from 'types/ComponentReturnType';\nimport { getCleanString } from 'utils';\n\ntype addItemFormPropsType = {\n  addItemCallback: (itemName: string) => void;\n  disabled?: boolean;\n};\nconst AddItemFormWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  padding-bottom: 20px;\n`;\n\nexport const AddItemForm = memo(\n  ({ disabled = false, ...props }: addItemFormPropsType): ComponentReturnType => {\n    // console.log(\n    //   `AddItemForm with \"${props.addItemCallback.toString()}\" callback was called`,\n    // );\n    const [textFieldContent, setTextFieldContent] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n\n    const onTextFieldChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      if (error) {\n        setError(false);\n      }\n      setTextFieldContent(event.currentTarget.value);\n    };\n\n    const addItem = (): void => {\n      const title = getCleanString(textFieldContent);\n      if (title) {\n        props.addItemCallback(title);\n      } else {\n        setError(true);\n      }\n      setTextFieldContent('');\n    };\n\n    const onEnterKeyPress = (event: React.KeyboardEvent<HTMLInputElement>): void => {\n      if (event.key === 'Enter') {\n        addItem();\n      }\n    };\n\n    return (\n      <AddItemFormWrapper>\n        <TextField\n          disabled={disabled}\n          label={error ? 'give it a name' : 'Title'}\n          size=\"small\"\n          variant=\"outlined\"\n          value={textFieldContent}\n          error={error}\n          onChange={onTextFieldChange}\n          onKeyPress={onEnterKeyPress}\n        />\n        <IconButton disabled={disabled} onClick={addItem}>\n          <AddBox />\n        </IconButton>\n      </AddItemFormWrapper>\n    );\n  },\n);\n","import React, { memo, useCallback, useState } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\n\nimport { ComponentReturnType } from 'types/ComponentReturnType';\nimport { getCleanString } from 'utils';\n\ntype EditableSpanPropsType = {\n  disabled?: boolean;\n  itemName: string;\n  itemNameChangedCallback: (newName: string) => void;\n};\n\nexport const EditableSpan = memo(\n  ({ disabled = false, ...props }: EditableSpanPropsType): ComponentReturnType => {\n    // console.log(`editableSpan was called, text: ${props.itemName}`);\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [textFieldContent, setTextFieldContent] = useState('');\n    const [error, setError] = useState<boolean>(false);\n\n    const handleDoubleClick = (): void => {\n      if (disabled) return;\n      setEditMode(true);\n      setTextFieldContent(props.itemName);\n    };\n\n    const onTextFieldChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      setError(false);\n      setTextFieldContent(event.currentTarget.value);\n    };\n\n    const saveNewName = (): void => {\n      const title = getCleanString(textFieldContent);\n      if (title) {\n        setEditMode(false);\n        props.itemNameChangedCallback(title);\n        setTextFieldContent(props.itemName);\n      } else {\n        setTextFieldContent('');\n        setError(true);\n      }\n    };\n\n    const onEnterKeyPress = useCallback(\n      (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n          saveNewName();\n        }\n      },\n      [saveNewName],\n    );\n\n    return editMode ? (\n      <TextField\n        error={Boolean(error)}\n        helperText={error}\n        onKeyPress={onEnterKeyPress}\n        autoFocus\n        onBlur={saveNewName}\n        value={textFieldContent}\n        onChange={onTextFieldChange}\n      />\n    ) : (\n      <span onDoubleClick={handleDoubleClick}>{props.itemName}</span>\n    );\n  },\n);\n","import React, { memo, useCallback } from 'react';\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Backspace from '@material-ui/icons/Backspace';\nimport styled from 'styled-components';\n\nimport { EditableSpan } from './EditableSpan';\nimport { TaskStatus } from 'api/types';\n\n\ntype TaskPropsType = {\n  // listID: string\n  taskID: string;\n  taskName: string;\n  isDone: boolean;\n  changeStatus: (taskID: string, newStatus: TaskStatus) => void;\n  changeName: (taskID: string, newName: string) => void;\n  removeTask: (taskID: string) => void;\n};\n\nconst TaskNameWithCheckboxWrapper = styled.div`\n  //min-width: 260px;\n  //border-bottom: 2px solid gray;\n`;\n\nexport const Task = memo((props: TaskPropsType) => {\n  // console.log(`Task was called, title: ${props.taskName}`);\n\n  // const dispatch = useDispatch()\n\n  const changeStatus = useCallback(\n    event => {\n      const newTaskStatus = event.currentTarget.checked\n        ? TaskStatus.Completed\n        : TaskStatus.New;\n      props.changeStatus(props.taskID, newTaskStatus);\n    },\n    [props.changeStatus, props.taskID],\n  );\n\n  const changeName = useCallback(\n    (newName: string) => {\n      props.changeName(props.taskID, newName);\n    },\n    [props.changeName, props.taskID],\n  );\n\n  const removeTask = useCallback(() => {\n    props.removeTask(props.taskID);\n  }, [props.removeTask, props.taskID]);\n\n  return (\n    <>\n      <TaskNameWithCheckboxWrapper>\n        <Checkbox checked={props.isDone} color=\"primary\" onChange={changeStatus} />\n        <EditableSpan itemName={props.taskName} itemNameChangedCallback={changeName} />\n      </TaskNameWithCheckboxWrapper>\n\n      <IconButton\n        size=\"small\"\n        // variant={\"contained\"}\n        onClick={removeTask}\n      >\n        <Backspace color=\"primary\" />\n      </IconButton>\n    </>\n  );\n});\n","import axios from 'axios';\n\nexport const axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'API-KEY': process.env.REACT_APP_API_KEY as string,\n  },\n});\n","import { axiosInstance } from './config';\nimport {\n  BaseResponseType,\n  GetTasksResponseDataType,\n  taskPutRequestBodyType,\n  TaskType,\n  TodoListOnServerType,\n} from './types';\n\nexport const appDataAPI = {\n  updateTodoList(todolistId: string, title: string) {\n    return axiosInstance.put<BaseResponseType>(`todo-lists/${todolistId}`, { title });\n  },\n  deleteTodoList(todolistId: string) {\n    return axiosInstance.delete<BaseResponseType>(`todo-lists/${todolistId}`);\n  },\n  createTodoList(name: string) {\n    return axiosInstance.post<BaseResponseType<{ item: TodoListOnServerType }>>(\n      'todo-lists',\n      {\n        title: name,\n      },\n    );\n  },\n  getTodoLists() {\n    return axiosInstance.get<Array<TodoListOnServerType>>('todo-lists');\n  },\n  createTask(todolistID: string, name: string) {\n    return axiosInstance.post<BaseResponseType<{ item: TaskType }>>(\n      `todo-lists/${todolistID}/tasks`,\n      { title: name },\n    );\n  },\n  getTasks(todolistID: string) {\n    return axiosInstance.get<GetTasksResponseDataType>(`todo-lists/${todolistID}/tasks`);\n  },\n  updateTask(todolistID: string, taskID: string, requestPayload: taskPutRequestBodyType) {\n    return axiosInstance.put<BaseResponseType<{ item: TaskType }>>(\n      `todo-lists/${todolistID}/tasks/${taskID}`,\n      requestPayload,\n    );\n  },\n  deleteTask(todolistID: string, taskID: string) {\n    return axiosInstance.delete<BaseResponseType>(\n      `/todo-lists/${todolistID}/tasks/${taskID}`,\n    );\n  },\n};\n","import { axiosInstance } from './config';\nimport { AuthMeResponseDataType, BaseResponseType, LoginRequestDataType } from './types';\n\nexport const authAPI = {\n  login(authData: LoginRequestDataType) {\n    return axiosInstance.post<BaseResponseType<{ userId?: number }>>(\n      'auth/login',\n      authData,\n    );\n  },\n  logout() {\n    return axiosInstance.delete<BaseResponseType>('auth/login');\n  },\n  authMe() {\n    return axiosInstance.get<BaseResponseType<AuthMeResponseDataType>>('auth/me');\n  },\n};\n","import { TodoListOnServerType } from 'api/types';\nimport { EntityStatusType, TasksFilterType } from 'state/actions/types';\n\nexport const removeListAC = (listID: string) =>\n  ({\n    type: 'REMOVE-LIST',\n    payload: {\n      listID,\n    },\n  } as const);\n\nexport const addListAC = (todoList: TodoListOnServerType) =>\n  ({\n    type: 'ADD-LIST',\n    payload: {\n      todoList,\n    },\n  } as const);\n\nexport const changeFilterAC = (listID: string, filter: TasksFilterType) =>\n  ({\n    type: 'CHANGE-FILTER',\n    payload: {\n      listID,\n      activeFilter: filter,\n    },\n  } as const);\n\nexport const changeListNameAC = (listID: string, newName: string) =>\n  ({\n    type: 'CHANGE-LIST-NAME',\n    payload: {\n      listID,\n      newName,\n    },\n  } as const);\n\nexport const setListsAC = (lists: Array<TodoListOnServerType>) =>\n  ({\n    type: 'SET-LISTS',\n    payload: {\n      lists,\n    },\n  } as const);\n\nexport const setListStatusAC = (listID: string, newStatus: EntityStatusType) =>\n  ({\n    type: 'SET-LIST-STATUS',\n    payload: {\n      listID,\n      entityStatus: newStatus,\n    },\n  } as const);\n","import { TodoListOnServerType } from 'api/types';\nimport { TasksActionsType, TasksListType } from 'state/actions/types';\n\nconst initialState: TasksListType = {};\n\nexport const tasksActionsReducer = (\n  state: TasksListType = initialState,\n  action: TasksActionsType,\n): TasksListType => {\n  switch (action.type) {\n    case 'ADD-TASK':\n      // action.payload.task.todoListId - where should I get the value ?\n      // new task always on top after app reload - is it server determined?\n      return {\n        ...state,\n        [action.payload.listID]: [action.payload.task, ...state[action.payload.listID]],\n      };\n\n    case 'REMOVE-TASK':\n      return {\n        ...state,\n        [action.payload.listID]: state[action.payload.listID].filter(\n          task => task.id !== action.payload.taskID,\n        ),\n      };\n\n    case 'UPDATE-TASK-DATA':\n      return {\n        ...state,\n        [action.payload.listID]: state[action.payload.listID].map(task =>\n          task.id === action.payload.taskID\n            ? { ...task, ...action.payload.newData }\n            : task,\n        ),\n      };\n\n    case 'REMOVE-LIST': {\n      const stateCopy = { ...state };\n      delete stateCopy[action.payload.listID];\n      return stateCopy;\n    }\n    case 'SET-TASKS':\n      return { ...state, [action.payload.todoListID]: action.payload.tasks };\n\n    case 'ADD-LIST':\n      return { ...state, [action.payload.todoList.id]: [] };\n\n    case 'SET-LISTS': {\n      const stateCopy = { ...state };\n      action.payload.lists.forEach((list: TodoListOnServerType) => {\n        stateCopy[list.id] = [];\n      });\n      return stateCopy;\n    }\n    default:\n      return state;\n  }\n};\n","import { Dispatch } from 'redux';\n\nimport { appDataAPI } from 'api';\nimport { ServerResultCodes, taskPutRequestBodyType, TaskType } from 'api/types';\nimport { setAppErrorAC, setAppStatusAC } from 'state/actions/app';\nimport { addTaskAC, removeTaskAC, updateTaskDataAC } from 'state/actions/tasks';\nimport { UpdateTaskDataType } from 'state/actions/types';\nimport { RootStateType } from 'state/store';\nimport { handleReject, handleResolveWithServerErrorMessage } from 'utils';\n\nexport const setTasksAC = (todoListID: string, tasks: Array<TaskType>) =>\n  ({\n    type: 'SET-TASKS',\n    payload: {\n      todoListID,\n      tasks,\n    },\n  } as const);\n\nexport const fetchTasksTC = (todoListID: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  appDataAPI\n    .getTasks(todoListID)\n    .then(response => {\n      dispatch(setTasksAC(todoListID, response.data.items));\n      dispatch(setAppStatusAC('succeeded'));\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\nexport const removeTaskTC = (listID: string, taskID: string) => (dispatch: Dispatch) => {\n  appDataAPI\n    .deleteTask(listID, taskID)\n    .then(response => {\n      dispatch(removeTaskAC(listID, taskID));\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\nexport const addTaskTC = (listID: string, taskName: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  appDataAPI\n    .createTask(listID, taskName)\n    .then(response => {\n      if (response.data.resultCode === ServerResultCodes.success) {\n        dispatch(addTaskAC(listID, response.data.data.item));\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleResolveWithServerErrorMessage<{ item: TaskType }>(response.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\nexport const updateTaskTC =\n  (listID: string, taskID: string, newTaskData: UpdateTaskDataType) =>\n  (dispatch: Dispatch, getState: () => RootStateType) => {\n    const currentState = getState();\n    const taskToBeChanged = currentState.tasks[listID].find(task => task.id === taskID);\n\n    if (!taskToBeChanged) {\n      console.warn(`task with id ${taskID} not found in todo list ${listID}`);\n      return;\n    }\n\n    const requestPayload: taskPutRequestBodyType = {\n      deadline: taskToBeChanged.deadline,\n      description: taskToBeChanged.description,\n      priority: taskToBeChanged.priority,\n      startDate: taskToBeChanged.startDate,\n      status: taskToBeChanged.status,\n      title: taskToBeChanged.title,\n      ...newTaskData,\n    };\n\n    // type TodoPreview = Omit<Todo, \"addedDate\">;\n    // type TodoPreview = Pick<TaskType, \"deadline\" | \"description\" | \"priority\" | \"startDate\" | \"status\"  |\"title\">\n    // is there a way to \"filter\" task properties and create object for put request body automatically?\n    // let clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));\n    // debugger\n\n    appDataAPI\n      .updateTask(listID, taskID, requestPayload)\n      .then(response => {\n        if (response.data.resultCode === ServerResultCodes.success) {\n          dispatch(updateTaskDataAC(listID, taskID, newTaskData));\n        } else {\n          handleResolveWithServerErrorMessage(response.data, dispatch);\n        }\n      })\n      .catch(error => {\n        dispatch(setAppErrorAC(error.message));\n      });\n  };\n","import { TaskType } from 'api/types';\nimport { UpdateTaskDataType } from 'state/actions/types';\n\nexport const addTaskAC = (listID: string, task: TaskType) =>\n  ({\n    type: 'ADD-TASK',\n    payload: {\n      listID,\n      task,\n    },\n  } as const);\n\nexport const removeTaskAC = (listID: string, taskID: string) =>\n  ({\n    type: 'REMOVE-TASK',\n    payload: {\n      listID,\n      taskID,\n    },\n  } as const);\n\nexport const updateTaskDataAC = (\n  listID: string,\n  taskID: string,\n  newData: UpdateTaskDataType,\n) =>\n  ({\n    type: 'UPDATE-TASK-DATA',\n    payload: {\n      listID,\n      taskID,\n      newData,\n    },\n  } as const);\n","import { RootStateType } from '../store';\n\nimport { EntityStatusType } from 'state/actions/types';\n\nexport const getAppStatus = (state: RootStateType): EntityStatusType =>\n  state.app.appStatus;\n","import { RootStateType } from '../store';\n\nexport const getAppInitializationState = (state: RootStateType): boolean =>\n  state.app.isInitialized;\n","import { RootStateType } from 'state/store';\n\nexport const getAuthState = (state: RootStateType): boolean =>\n  state.auth.isLoggedIn;\n","import React, { memo, useCallback, useEffect } from 'react';\n\n// import {Button, IconButton, List, ListItem} from \"@material-ui/core\";\n// tree-shaking is working out of the box??\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Delete from '@material-ui/icons/Delete';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { AddItemForm } from './AddItemForm';\nimport { EditableSpan } from './EditableSpan';\nimport { Task } from './Task';\n\nimport { TaskStatus } from 'api/types';\nimport { EntityStatusType, TasksFilterType } from 'state/actions/types';\nimport { changeListNameTC, removeListTC } from 'state/middlewares/lists';\nimport {} from 'state/reducers/tasksActionsReducer';\nimport {\n  addTaskTC,\n  fetchTasksTC,\n  removeTaskTC,\n  updateTaskTC,\n} from 'state/middlewares/tasks';\nimport { getAuthState, selectTodoListTasks } from 'state/selectors';\nimport { RootStateType } from 'state/store';\nimport { changeFilterAC } from 'state/actions/lists';\n\ntype TodolistPropsType = {\n  demo?: boolean;\n  listStatus: EntityStatusType;\n  todolistID: string;\n  title: string;\n  activeFilter: TasksFilterType;\n};\n\nconst TodolistCard = styled.div`\n  min-width: 300px;\n`;\n\nconst FilterButtonsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-right: 0;\n`;\n\nexport const Todolist = memo(\n  ({ demo = false, listStatus, ...props }: TodolistPropsType) => {\n    // console.log(`todolist was called, title: ${props.title}`);\n\n    // const listStatus = useSelector<RootStateType, EntityStatusType>(state => state.lists.)\n    // const tasks = useAppSelector<TaskType[]>(state => state.tasks[props.todolistID]);\n    const tasks = useSelector((state: RootStateType) =>\n      selectTodoListTasks(state, props.todolistID),\n    );\n    const userIsLoggedIn = useSelector(getAuthState);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n      if (demo || !userIsLoggedIn) return;\n      dispatch(fetchTasksTC(props.todolistID));\n    }, [dispatch, props.todolistID, demo]);\n\n    let filteredTasks = tasks;\n    if (props.activeFilter === 'active') {\n      filteredTasks = tasks.filter(task => task.status === TaskStatus.New);\n    }\n    if (props.activeFilter === 'completed') {\n      filteredTasks = tasks.filter(task => task.status === TaskStatus.Completed);\n    }\n\n    const changeTaskStatus = useCallback(\n      (taskID: string, newStatus: TaskStatus) => {\n        dispatch(updateTaskTC(props.todolistID, taskID, { status: newStatus }));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    const addTask = useCallback(\n      (name: string) => {\n        dispatch(addTaskTC(props.todolistID, name));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    const removeTask = useCallback(\n      (taskID: string) => {\n        dispatch(removeTaskTC(props.todolistID, taskID));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    const changeFilter = useCallback(\n      (newFilterValue: TasksFilterType) => {\n        dispatch(changeFilterAC(props.todolistID, newFilterValue));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    const deleteTodolist = useCallback(() => {\n      const action = removeListTC(props.todolistID);\n      dispatch(action);\n    }, [dispatch, props.todolistID]);\n\n    const changeTaskName = useCallback(\n      (taskID: string, newName: string) => {\n        dispatch(updateTaskTC(props.todolistID, taskID, { title: newName }));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    const changeListName = useCallback(\n      (newName: string) => {\n        dispatch(changeListNameTC(props.todolistID, newName));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    return (\n      <TodolistCard>\n        <h3>\n          <EditableSpan itemName={props.title} itemNameChangedCallback={changeListName} />\n          <IconButton disabled={listStatus === 'loading'} onClick={deleteTodolist}>\n            <Delete />\n          </IconButton>\n        </h3>\n        <AddItemForm disabled={listStatus === 'loading'} addItemCallback={addTask} />\n        <List disablePadding>\n          {filteredTasks.map(task => (\n            <ListItem\n              disableGutters\n              key={task.id}\n              style={{ justifyContent: 'space-between' }}\n            >\n              <Task\n                taskID={task.id}\n                isDone={task.status === TaskStatus.Completed}\n                changeName={changeTaskName}\n                taskName={task.title}\n                changeStatus={changeTaskStatus}\n                removeTask={removeTask}\n              />\n            </ListItem>\n          ))}\n        </List>\n        <FilterButtonsWrapper>\n          <Button\n            variant=\"contained\"\n            color={props.activeFilter === 'all' ? 'primary' : 'default'}\n            onClick={() => changeFilter('all')}\n          >\n            All\n          </Button>\n          <Button\n            variant=\"contained\"\n            color={props.activeFilter === 'active' ? 'primary' : 'default'}\n            onClick={() => changeFilter('active')}\n          >\n            Active\n          </Button>\n          <Button\n            variant=\"contained\"\n            color={props.activeFilter === 'completed' ? 'primary' : 'default'}\n            onClick={() => changeFilter('completed')}\n          >\n            Completed\n          </Button>\n        </FilterButtonsWrapper>\n      </TodolistCard>\n    );\n  },\n);\n","import { RootStateType } from '../store';\n\nimport { TaskType } from 'api/types';\n\nexport const selectTodoListTasks = (\n  state: RootStateType,\n  todoListID: string,\n): TaskType[] => state.tasks[todoListID];\n","import { Dispatch } from 'redux';\n\nimport { appDataAPI } from 'api';\nimport { ServerResultCodes, TodoListOnServerType } from 'api/types';\nimport { setAppStatusAC } from 'state/actions/app';\nimport {\n  addListAC,\n  changeListNameAC,\n  removeListAC,\n  setListsAC,\n  setListStatusAC,\n} from 'state/actions/lists';\nimport { ListsActionsType } from 'state/actions/types';\nimport { handleReject, handleResolveWithServerErrorMessage } from 'utils';\n\nexport const fetchListsTC = () => (dispatch: Dispatch<ListsActionsType>) => {\n  dispatch(setAppStatusAC('loading'));\n  appDataAPI\n    .getTodoLists()\n    .then(response => {\n      dispatch(setListsAC(response.data));\n      dispatch(setAppStatusAC('succeeded'));\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\nexport const removeListTC =\n  (listID: string) => (dispatch: Dispatch<ListsActionsType>) => {\n    dispatch(setAppStatusAC('loading'));\n    dispatch(setListStatusAC(listID, 'loading'));\n    appDataAPI\n      .deleteTodoList(listID)\n      .then(response => {\n        if (response.data.resultCode === ServerResultCodes.success) {\n          dispatch(removeListAC(listID));\n          dispatch(setAppStatusAC('succeeded'));\n          dispatch(setListStatusAC(listID, 'idle'));\n        } else {\n          handleResolveWithServerErrorMessage(response.data, dispatch);\n        }\n      })\n      .catch(error => {\n        handleReject(error, dispatch);\n      });\n  };\n\nexport const addListTC = (name: string) => (dispatch: Dispatch<ListsActionsType>) => {\n  dispatch(setAppStatusAC('loading'));\n  appDataAPI\n    .createTodoList(name)\n    .then(response => {\n      if (response.data.resultCode === ServerResultCodes.success) {\n        dispatch(addListAC(response.data.data.item));\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleResolveWithServerErrorMessage<{ item: TodoListOnServerType }>(\n          response.data,\n          dispatch,\n        );\n      }\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\nexport const changeListNameTC =\n  (listID: string, newName: string) => (dispatch: Dispatch<ListsActionsType>) => {\n    dispatch(setAppStatusAC('loading'));\n    dispatch(setListStatusAC(listID, 'loading'));\n    appDataAPI\n      .updateTodoList(listID, newName)\n      .then(response => {\n        if (response.data.resultCode === ServerResultCodes.success) {\n          dispatch(changeListNameAC(listID, newName));\n          dispatch(setAppStatusAC('succeeded'));\n          dispatch(setListStatusAC(listID, 'idle'));\n        } else {\n          handleResolveWithServerErrorMessage(response.data, dispatch);\n        }\n      })\n      .catch(error => {\n        handleReject(error, dispatch);\n      });\n  };\n","import { APP_ACTIONS_TYPE } from 'state/actions/enums';\nimport { AppReducerActionsType, AppStateType } from 'state/actions/types';\n\nconst iniAppState: AppStateType = {\n  appStatus: 'idle',\n  error: null,\n  isInitialized: false,\n};\n\nexport const appReducer = (\n  state: AppStateType = iniAppState,\n  action: AppReducerActionsType,\n): AppStateType => {\n  switch (action.type) {\n    case APP_ACTIONS_TYPE.APP_SET_STATUS:\n      return { ...state, appStatus: action.status };\n    case APP_ACTIONS_TYPE.APP_SET_ERROR:\n      return { ...state, error: action.error };\n    case APP_ACTIONS_TYPE.APP_SET_INIT:\n      return { ...state, isInitialized: action.isInitialized };\n    default:\n      return { ...state };\n  }\n};\n","import { ListsActionsType, TodoListInAppType } from 'state/actions/types';\nimport {TodoListOnServerType} from \"api/types\";\n\nconst initialState: Array<TodoListInAppType> = [];\n\nexport const listsActionsReducer = (\n  state: Array<TodoListInAppType> = initialState,\n  action: ListsActionsType,\n): Array<TodoListInAppType> => {\n  switch (action.type) {\n    case 'ADD-LIST': {\n      const newInAppList: TodoListInAppType = {\n        ...action.payload.todoList,\n        activeFilter: 'all',\n        entityStatus: 'idle',\n      };\n      return [newInAppList, ...state];\n    }\n    case 'REMOVE-LIST':\n      return state.filter(list => list.id !== action.payload.listID);\n    case 'CHANGE-FILTER':\n      return state.map(list =>\n        list.id === action.payload.listID\n          ? {\n              ...list,\n              activeFilter: action.payload.activeFilter,\n            }\n          : list,\n      );\n    case 'CHANGE-LIST-NAME':\n      return state.map(list =>\n        list.id === action.payload.listID\n          ? {\n              ...list,\n              title: action.payload.newName,\n            }\n          : list,\n      );\n    case 'SET-LISTS':\n      return action.payload.lists.map((list: TodoListOnServerType) => ({\n        ...list,\n        activeFilter: 'all',\n        entityStatus: 'idle',\n      }));\n    case 'SET-LIST-STATUS':\n      return state.map(list =>\n        list.id === action.payload.listID\n          ? {\n              ...list,\n              entityStatus: action.payload.entityStatus,\n            }\n          : list,\n      );\n    default:\n      return state;\n  }\n};\n","import { LoginActionType } from 'state/actions/types';\n\ntype LoginStateType = {\n  isLoggedIn: boolean;\n};\n\nconst iniState: LoginStateType = {\n  isLoggedIn: false,\n};\nexport const authReducer = (\n  state = iniState,\n  action: LoginActionType,\n): LoginStateType => {\n  switch (action.type) {\n    case 'login/SET-AUTH-STATE':\n      return { ...state, isLoggedIn: action.isLoggedIn };\n    default:\n      return state;\n  }\n};\n\nexport const setAuthStateAC = (newAuthState: boolean) =>\n  ({\n    type: 'login/SET-AUTH-STATE',\n    isLoggedIn: newAuthState,\n  } as const);\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { appReducer } from './reducers/appReducer';\nimport { listsActionsReducer } from './reducers/listsActionsReducer';\nimport { authReducer } from 'state/reducers/authReducer';\nimport { tasksActionsReducer } from './reducers/tasksActionsReducer';\n\nconst rootReducer = combineReducers({\n  tasks: tasksActionsReducer,\n  lists: listsActionsReducer,\n  app: appReducer,\n  auth: authReducer,\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\nexport type RootStateType = ReturnType<typeof rootReducer>;\n// useSelector which has store RootStateType\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\n\n// @ts-ignore\nwindow.store = store;\n","import React, { memo, useCallback, useEffect } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { AddItemForm } from './AddItemForm';\nimport { Todolist } from './Todolist';\n\nimport { TodoListInAppType } from 'state/actions/types';\nimport { addListTC, fetchListsTC } from 'state/middlewares/lists';\nimport { getAuthState } from 'state/selectors';\nimport { useAppSelector } from 'state/store';\n\ntype AllTodoListsPropsType = {\n  demo?: boolean;\n};\n\nexport const AllTodoLists = memo(({ demo = false }: AllTodoListsPropsType) => {\n  // const todolists = useSelector<RootStateType, TodoListInAppType[]>(state => state.lists);\n  const todolists = useAppSelector<TodoListInAppType[]>(state => state.lists);\n  const userIsLoggedIn = useSelector(getAuthState);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (demo || !userIsLoggedIn) return;\n    dispatch(fetchListsTC());\n  }, []);\n\n  const addTodolist = useCallback(\n    (listName: string) => {\n      if (listName) {\n        dispatch(addListTC(listName));\n      }\n    },\n    [dispatch],\n  );\n  if (!userIsLoggedIn) {\n    return <Navigate replace to=\"/login\" />;\n  }\n\n  return (\n    <>\n      <Grid container style={{ paddingTop: '20px' }}>\n        <AddItemForm addItemCallback={addTodolist} />\n      </Grid>\n      <Grid container spacing={3}>\n        {todolists.map(list => (\n          <Grid item key={list.id}>\n            <Paper style={{ padding: '20px' }} elevation={10}>\n              <Todolist\n                demo={demo}\n                listStatus={list.entityStatus}\n                todolistID={list.id}\n                title={list.title}\n                activeFilter={list.activeFilter}\n              />\n            </Paper>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n});\n","import React from 'react';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport { useDispatch } from 'react-redux';\n\nimport { setAppErrorAC } from 'state/actions/app';\nimport { useAppSelector } from 'state/store';\nimport { ComponentReturnType } from 'types/ComponentReturnType';\n\nconst Alert = (props: AlertProps) => (\n  <MuiAlert elevation={6} variant=\"filled\" {...props} />\n);\n\nexport const ErrorSnackbar = (): ComponentReturnType => {\n  const error = useAppSelector<string | null>(state => state.app.error);\n  const isOpen = error !== null;\n\n  const dispatch = useDispatch();\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string): void => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAppErrorAC(null));\n  };\n\n  return (\n    <Snackbar open={isOpen} autoHideDuration={5000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\">\n        {error && error}\n      </Alert>\n    </Snackbar>\n  );\n};\n","import React, { useState } from 'react';\n\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  TextField,\n} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { loginTC } from 'state/middlewares/login';\nimport { getAuthState } from 'state/selectors';\nimport { useAppSelector } from 'state/store';\nimport { ComponentReturnType } from 'types/ComponentReturnType';\n\nexport const Login = (): ComponentReturnType => {\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n  const userIsLoggedIn = useAppSelector(getAuthState);\n  const dispatch = useDispatch();\n\n  const MIN_PASSWORD_LENGTH = 4;\n\n  const formik = useFormik({\n    validate: (values) => {\n      if (!values.email) {\n        return { email: 'email required' };\n      }\n      if (values.password.length < MIN_PASSWORD_LENGTH) {\n        return { password: 'password is too short' };\n      }\n      if (!values.password) {\n        return { password: 'password required' };\n      }\n    },\n    initialValues: {\n      email: 'free@samuraijs.com',\n      password: 'free',\n      rememberMe: false,\n      // showPassword: false,\n    },\n    onSubmit: values => {\n      dispatch(loginTC(values));\n    },\n  });\n\n  const handlePasswordVisibilityChange = (): void => {\n    setShowPassword(!showPassword);\n  };\n\n  if (userIsLoggedIn) {\n    return <Navigate replace to=\"/\" />;\n  }\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item xs={4}>\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel\n              style={{ marginTop: '20vh', minWidth: '300px', textAlign: 'center' }}\n            >\n              <p>\n                sign up on <a href=\"https://social-network.samuraijs.com/\">samuraiJS</a>\n              </p>\n              <p>or use the default credentials</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                name=\"email\"\n                margin=\"normal\"\n                type=\"email\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.email}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.errors.email}\n              />\n              <TextField\n                label=\"Password\"\n                name=\"password\"\n                margin=\"normal\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.password}\n                type={showPassword ? '' : 'password'}\n                error={formik.touched.password && Boolean(formik.errors.password)}\n                helperText={formik.errors.password}\n              />\n\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    name=\"rememberMe\"\n                    onChange={formik.handleChange}\n                    checked={formik.values.rememberMe}\n                  />\n                }\n                label=\"remember me\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={showPassword}\n                    onChange={handlePasswordVisibilityChange}\n                  />\n                }\n                label=\"show password\"\n              />\n\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={Boolean(formik.errors.password) || Boolean(formik.errors.email)}\n              >\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import { Dispatch } from 'redux';\n\nimport { authAPI } from 'api';\nimport { LoginRequestDataType, ServerResultCodes } from 'api/types';\nimport { setAppStatusAC } from 'state/actions/app';\nimport { setAuthStateAC } from 'state/reducers/authReducer';\nimport { handleReject, handleResolveWithServerErrorMessage } from 'utils';\n\nexport const loginTC = (authData: LoginRequestDataType) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI\n    .login(authData)\n    .then(response => {\n      if (response.data.resultCode === ServerResultCodes.success) {\n        dispatch(setAuthStateAC(true));\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleResolveWithServerErrorMessage(response.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\nexport const logoutTC = () => (dispatch: Dispatch) => {\n  authAPI\n    .logout()\n    .then(response => {\n      if (response.data.resultCode === ServerResultCodes.success) {\n        dispatch(setAuthStateAC(false));\n      } else {\n        handleResolveWithServerErrorMessage(response.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n","import React from 'react';\n\nimport notFound from './assets/page404png.png';\n\nimport { ComponentReturnType } from 'types/ComponentReturnType';\n\nexport const Page404 = (): ComponentReturnType => (\n  <div\n    style={{\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '90vh',\n    }}\n  >\n    <img src={notFound} alt=\"404\" />\n  </div>\n);\n","import { Dispatch } from 'redux';\n\nimport { authAPI } from 'api';\nimport { ServerResultCodes } from 'api/types';\nimport { initializeAppAC, setAppStatusAC } from 'state/actions/app';\nimport { setAuthStateAC } from 'state/reducers/authReducer';\nimport { handleReject, handleResolveWithServerErrorMessage } from 'utils';\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n  authAPI\n    .authMe()\n    .then(response => {\n      if (response.data.resultCode === ServerResultCodes.success) {\n        // dispatch(initializeAppAC(true));\n        dispatch(setAuthStateAC(true));\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleResolveWithServerErrorMessage(response.data, dispatch);\n      }\n      dispatch(initializeAppAC(true));\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n","import React, { useEffect } from 'react';\n\nimport { Box, CircularProgress } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { Menu } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Routes, Navigate, useNavigate } from 'react-router-dom';\n\nimport { AllTodoLists } from 'components/AllTodoLists';\nimport { ErrorSnackbar } from 'components/ErrorSnackbar';\nimport { Login } from 'components/Login';\nimport { Page404 } from 'components/Page404';\nimport { initializeAppTC } from 'state/middlewares/app';\nimport { logoutTC } from 'state/middlewares/login';\nimport { getAppInitializationState, getAppStatus, getAuthState } from 'state/selectors';\nimport { ComponentReturnType } from 'types/ComponentReturnType';\n\ntype AppPropsType = {\n  demo?: boolean;\n};\n\nexport const App = ({ demo = false }: AppPropsType): ComponentReturnType => {\n  // console.log('app was called');\n  const appStatus = useSelector(getAppStatus);\n  const appIsInitialized = useSelector(getAppInitializationState);\n  const userIsLoggedIn = useSelector(getAuthState);\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initializeAppTC());\n  }, []);\n\n  if (!appIsInitialized) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', marginTop: '50vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  const handleLogout = (): void => {\n    dispatch(logoutTC());\n    navigate('/login');\n  };\n\n  const showProgressBar = appStatus === 'loading';\n\n  return (\n    <div>\n      <ErrorSnackbar />\n      <AppBar position=\"static\">\n        {/* <Toolbar style={{ justifyContent: 'space-between' }}> */}\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">Todolist</Typography>\n          {userIsLoggedIn && (\n            <Button\n              color=\"inherit\"\n              variant=\"outlined\"\n              onClick={handleLogout}\n              style={{ marginLeft: '50px' }}\n            >\n              Log out\n            </Button>\n          )}\n        </Toolbar>\n        {showProgressBar && <LinearProgress color=\"secondary\" />}\n      </AppBar>\n      <Container fixed>\n        <Routes>\n          <Route path=\"/it-inc-todolist-ts\" element={<AllTodoLists demo={demo} />} />\n          <Route path=\"/\" element={<AllTodoLists demo={demo} />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"404\" element={<Page404 />} />\n          <Route path=\"*\" element={<Navigate to=\"404\" />} />\n        </Routes>\n      </Container>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport { App } from 'App';\nimport { store } from 'state/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}