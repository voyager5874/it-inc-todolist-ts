{"version":3,"sources":["api/types/index.ts","api/config/index.ts","api/appDataAPI.ts","api/authAPI.ts","utils/backendErrorHandler.ts","state/reducers/appReducer.ts","state/reducers/listsActionsReducer.ts","state/reducers/tasksActionsReducer.ts","state/reducers/loginReducer.ts","state/store.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","components/Todolist.tsx","components/AllTodoLists.tsx","components/ErrorSnackbar.tsx","components/Login.tsx","state/selectors/getAppStatus.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskStatus","TaskPriority","ServerResultCodes","axiosInstance","axios","create","baseURL","process","withCredentials","headers","REACT_APP_API_KEY","appDataAPI","todolistId","title","put","delete","name","post","get","todolistID","taskID","requestPayload","authAPI","authData","APP_ACTIONS_TYPE","handleResolveWithServerErrorMessage","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleReject","error","message","iniAppState","appStatus","isInitialized","errorMessage","type","APP_SET_ERROR","newStatus","APP_SET_STATUS","status","initialState","setListStatusAC","listID","payload","entityStatus","updateTaskTC","newTaskData","getState","taskToBeChanged","tasks","find","task","id","deadline","description","priority","startDate","then","response","resultCode","success","newData","updateTaskDataAC","catch","console","warn","iniState","isLoggedIn","rootReducer","combineReducers","state","action","filter","map","stateCopy","todoListID","lists","newInAppList","todoList","activeFilter","list","newName","app","APP_SET_INIT","auth","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","window","AddItemFormWrapper","styled","div","AddItemForm","memo","disabled","props","useState","textFieldContent","setTextFieldContent","setError","addItem","addItemCallback","TextField","label","size","variant","value","onChange","event","currentTarget","trim","onKeyPress","key","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","saveNewName","cleanInputText","itemNameChangedCallback","itemName","onEnterKeyPress","useCallback","Boolean","helperText","autoFocus","onBlur","onDoubleClick","TaskNameWithCheckboxWrapper","Task","changeStatus","newTaskStatus","checked","Completed","New","changeName","removeTask","Checkbox","isDone","color","taskName","TodolistCard","FilterButtonsWrapper","Todolist","demo","listStatus","useDispatch","useEffect","setTasksAC","items","filteredTasks","changeTaskStatus","addTask","addTaskAC","item","removeTaskAC","removeTaskTC","changeFilter","newFilterValue","deleteTodolist","removeListAC","changeTaskName","changeListName","changeListNameAC","changeListNameTC","List","disablePadding","ListItem","disableGutters","style","justifyContent","Button","AllTodoLists","todolists","addTodolist","listName","Grid","container","paddingTop","spacing","Paper","padding","elevation","Alert","ErrorSnackbar","isOpen","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useNavigate","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","getAppStatus","App","showProgressBar","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7ecd4d6.chunk.js","sourcesContent":["export enum TaskStatus {\n  New,\n  InProgress,\n  Completed,\n  Draft,\n}\n\nexport enum TaskPriority {\n  Low,\n  Middle,\n  High,\n  Urgent,\n  Someday,\n}\n\nexport type TodoListOnServerType = {\n  id: string;\n  addedDate: string;\n  order: number;\n  title: string;\n};\n\nexport enum ServerResultCodes {\n  success = 0,\n  error = 1,\n  captcha = 10,\n}\n\nexport type BaseResponseType<T = {}> = {\n  resultCode: ServerResultCodes;\n  messages: Array<string>;\n  fieldsErrors: Array<string>;\n  data: T;\n};\n\nexport type GetTasksResponseType = {\n  error: null | string;\n  items: Array<TaskType>;\n  totalCount: number;\n};\n\nexport type taskPutRequestBodyType = {\n  title: string;\n  description: string;\n  status: TaskStatus;\n  priority: TaskPriority;\n  startDate: string;\n  deadline: string;\n};\n\nexport type TaskType = {\n  description: string;\n  title: string;\n  status: TaskStatus;\n  priority: TaskPriority;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\n\nexport type LoginDataType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: string;\n};\n","import axios from 'axios';\n\nexport const axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'API-KEY': process.env.REACT_APP_API_KEY as string,\n  },\n});\n","import { axiosInstance } from './config';\nimport {\n  BaseResponseType,\n  GetTasksResponseType,\n  taskPutRequestBodyType,\n  TaskType,\n  TodoListOnServerType,\n} from './types';\n\nexport const appDataAPI = {\n  updateTodoList(todolistId: string, title: string) {\n    return axiosInstance.put<BaseResponseType>(`todo-lists/${todolistId}`, { title });\n  },\n  deleteTodoList(todolistId: string) {\n    return axiosInstance.delete<BaseResponseType>(`todo-lists/${todolistId}`);\n  },\n  createTodoList(name: string) {\n    return axiosInstance.post<BaseResponseType<{ item: TodoListOnServerType }>>(\n      'todo-lists',\n      {\n        title: name,\n      },\n    );\n  },\n  getTodoLists() {\n    return axiosInstance.get<Array<TodoListOnServerType>>('todo-lists');\n  },\n  createTask(todolistID: string, name: string) {\n    return axiosInstance.post<BaseResponseType<{ item: TaskType }>>(\n      `todo-lists/${todolistID}/tasks`,\n      { title: name },\n    );\n  },\n  getTasks(todolistID: string) {\n    return axiosInstance.get<GetTasksResponseType>(`todo-lists/${todolistID}/tasks`);\n  },\n  updateTask(todolistID: string, taskID: string, requestPayload: taskPutRequestBodyType) {\n    return axiosInstance.put<BaseResponseType<{ item: TaskType }>>(\n      `todo-lists/${todolistID}/tasks/${taskID}`,\n      requestPayload,\n    );\n  },\n  deleteTask(todolistID: string, taskID: string) {\n    return axiosInstance.delete<BaseResponseType>(\n      `/todo-lists/${todolistID}/tasks/${taskID}`,\n    );\n  },\n};\n","import { axiosInstance } from './config';\nimport { BaseResponseType, LoginDataType } from './types';\n\nexport const authAPI = {\n  login(authData: LoginDataType) {\n    return axiosInstance.post<BaseResponseType<{ userId?: number }>>(\n      'auth/login',\n      authData,\n    );\n  },\n  authMe() {\n    return axiosInstance.get<BaseResponseType>('auth/me');\n  },\n};\n","import { AxiosError } from 'axios';\nimport { Dispatch } from 'redux';\n\nimport { BaseResponseType } from '../api/types';\nimport {\n  AppReducerActionsType,\n  setAppErrorAC,\n  setAppStatusAC,\n} from '../state/reducers/appReducer';\n\nexport const handleResolveWithServerErrorMessage = <T>(\n  data: BaseResponseType<T>,\n  dispatch: Dispatch<AppReducerActionsType>,\n) => {\n  if (data.messages.length) {\n    dispatch(setAppErrorAC(data.messages[0]));\n  } else {\n    dispatch(setAppErrorAC('some error occurred'));\n  }\n  dispatch(setAppStatusAC('failed'));\n};\n\nexport const handleReject = (\n  error: AxiosError,\n  dispatch: Dispatch<AppReducerActionsType>,\n) => {\n  dispatch(setAppErrorAC(error.message));\n  dispatch(setAppStatusAC('failed'));\n};\n","import { Dispatch } from 'redux';\n\nimport { authAPI } from 'api';\nimport { ServerResultCodes } from 'api/types';\nimport { Nullable } from 'types/Nullable';\nimport {\n  handleReject,\n  handleResolveWithServerErrorMessage,\n} from 'utils/backendErrorHandler';\n\nexport type EntityStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\nexport type IniAppStateType = {\n  appStatus: EntityStatusType;\n  error: Nullable<string>;\n  isInitialized: boolean;\n};\n\nexport enum APP_ACTIONS_TYPE {\n  APP_SET_STATUS = 'APP/SET-STATUS',\n  APP_SET_ERROR = 'APP/SET-ERROR',\n  APP_SET_INIT = 'APP/SET-INIT',\n}\n\nconst iniAppState: IniAppStateType = {\n  appStatus: 'idle',\n  error: null,\n  isInitialized: false,\n};\n\nexport const appReducer = (\n  state: IniAppStateType = iniAppState,\n  action: AppReducerActionsType,\n): IniAppStateType => {\n  switch (action.type) {\n    case APP_ACTIONS_TYPE.APP_SET_STATUS:\n      return { ...state, appStatus: action.status };\n    case APP_ACTIONS_TYPE.APP_SET_ERROR:\n      return { ...state, error: action.error };\n    case APP_ACTIONS_TYPE.APP_SET_INIT:\n      return { ...state, isInitialized: action.isInitialized };\n    default:\n      return { ...state };\n  }\n};\n\nexport const setAppErrorAC = (errorMessage: string | null) =>\n  ({\n    type: APP_ACTIONS_TYPE.APP_SET_ERROR,\n    error: errorMessage,\n  } as const);\n\nexport const setAppStatusAC = (newStatus: EntityStatusType) =>\n  ({\n    type: APP_ACTIONS_TYPE.APP_SET_STATUS,\n    status: newStatus,\n  } as const);\n\nexport const initializeAppAC = (newInitState: boolean) =>\n  ({\n    type: APP_ACTIONS_TYPE.APP_SET_INIT,\n    isInitialized: newInitState,\n  } as const);\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n  authAPI\n    .authMe()\n    .then(response => {\n      if (response.data.resultCode === ServerResultCodes.success) {\n        dispatch(initializeAppAC(true));\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleResolveWithServerErrorMessage(response.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\nexport type AppReducerActionsType =\n  | ReturnType<typeof setAppErrorAC>\n  | ReturnType<typeof setAppStatusAC>\n  | ReturnType<typeof initializeAppAC>;\n","import { Dispatch } from 'redux';\n\nimport { AppReducerActionsType, EntityStatusType, setAppStatusAC } from './appReducer';\n\nimport { appDataAPI } from 'api';\nimport { ServerResultCodes, TodoListOnServerType } from 'api/types';\nimport {\n  handleReject,\n  handleResolveWithServerErrorMessage,\n} from 'utils/backendErrorHandler';\n\nexport type TasksFilterType = 'all' | 'completed' | 'active';\n\nexport type TodoListInAppType = TodoListOnServerType & {\n  activeFilter: TasksFilterType;\n  entityStatus: EntityStatusType;\n};\n\nconst initialState: Array<TodoListInAppType> = [];\n\nexport const listsActionsReducer = (\n  state: Array<TodoListInAppType> = initialState,\n  action: ListsActionsType,\n): Array<TodoListInAppType> => {\n  switch (action.type) {\n    case 'ADD-LIST': {\n      const newInAppList: TodoListInAppType = {\n        ...action.payload.todoList,\n        activeFilter: 'all',\n        entityStatus: 'idle',\n      };\n      return [newInAppList, ...state];\n    }\n    case 'REMOVE-LIST':\n      return state.filter(list => list.id !== action.payload.listID);\n    case 'CHANGE-FILTER':\n      return state.map(list =>\n        list.id === action.payload.listID\n          ? {\n              ...list,\n              activeFilter: action.payload.activeFilter,\n            }\n          : list,\n      );\n    case 'CHANGE-LIST-NAME':\n      return state.map(list =>\n        list.id === action.payload.listID\n          ? {\n              ...list,\n              title: action.payload.newName,\n            }\n          : list,\n      );\n    case 'SET-LISTS':\n      return action.payload.lists.map(list => ({\n        ...list,\n        activeFilter: 'all',\n        entityStatus: 'idle',\n      }));\n    case 'SET-LIST-STATUS':\n      return state.map(list =>\n        list.id === action.payload.listID\n          ? {\n              ...list,\n              entityStatus: action.payload.entityStatus,\n            }\n          : list,\n      );\n    default:\n      return state;\n  }\n};\n\ntype ListsActionsType =\n  | ReturnType<typeof addListAC>\n  | ReturnType<typeof removeListAC>\n  | ReturnType<typeof changeFilterAC>\n  | ReturnType<typeof changeListNameAC>\n  | ReturnType<typeof setListsAC>\n  | ReturnType<typeof setListStatusAC>\n  | AppReducerActionsType;\n\nexport type RemoveListActionType = ReturnType<typeof removeListAC>;\nexport const removeListAC = (listID: string) =>\n  ({\n    type: 'REMOVE-LIST',\n    payload: {\n      listID,\n    },\n  } as const);\n\nexport type AddListActionType = ReturnType<typeof addListAC>;\nexport const addListAC = (todoList: TodoListOnServerType) =>\n  ({\n    type: 'ADD-LIST',\n    payload: {\n      todoList,\n    },\n  } as const);\n\n// type ChangeFilterActionType = ReturnType<typeof changeFilterAC>\nexport const changeFilterAC = (listID: string, filter: TasksFilterType) =>\n  ({\n    type: 'CHANGE-FILTER',\n    payload: {\n      listID,\n      activeFilter: filter,\n    },\n  } as const);\n\n// type ChangeListNameActionType = ReturnType<typeof changeListNameAC>\nexport const changeListNameAC = (listID: string, newName: string) =>\n  ({\n    type: 'CHANGE-LIST-NAME',\n    payload: {\n      listID,\n      newName,\n    },\n  } as const);\n\nexport type setListsActionType = ReturnType<typeof setListsAC>;\nexport const setListsAC = (lists: Array<TodoListOnServerType>) =>\n  ({\n    type: 'SET-LISTS',\n    payload: {\n      lists,\n    },\n  } as const);\n\nexport type setListStatusActionType = ReturnType<typeof setListStatusAC>;\nexport const setListStatusAC = (listID: string, newStatus: EntityStatusType) =>\n  ({\n    type: 'SET-LIST-STATUS',\n    payload: {\n      listID,\n      entityStatus: newStatus,\n    },\n  } as const);\n\nexport const fetchListsTC = () => (dispatch: Dispatch<ListsActionsType>) => {\n  dispatch(setAppStatusAC('loading'));\n  appDataAPI\n    .getTodoLists()\n    .then(response => {\n      dispatch(setListsAC(response.data));\n      dispatch(setAppStatusAC('succeeded'));\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\nexport const removeListTC =\n  (listID: string) => (dispatch: Dispatch<ListsActionsType>) => {\n    dispatch(setAppStatusAC('loading'));\n    dispatch(setListStatusAC(listID, 'loading'));\n    appDataAPI\n      .deleteTodoList(listID)\n      .then(response => {\n        if (response.data.resultCode === ServerResultCodes.success) {\n          dispatch(removeListAC(listID));\n          dispatch(setAppStatusAC('succeeded'));\n          dispatch(setListStatusAC(listID, 'idle'));\n        } else {\n          handleResolveWithServerErrorMessage(response.data, dispatch);\n        }\n      })\n      .catch(error => {\n        handleReject(error, dispatch);\n      });\n  };\n\nexport const addListTC = (name: string) => (dispatch: Dispatch<ListsActionsType>) => {\n  dispatch(setAppStatusAC('loading'));\n  appDataAPI\n    .createTodoList(name)\n    .then(response => {\n      if (response.data.resultCode === ServerResultCodes.success) {\n        dispatch(addListAC(response.data.data.item));\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleResolveWithServerErrorMessage<{ item: TodoListOnServerType }>(\n          response.data,\n          dispatch,\n        );\n      }\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\nexport const changeListNameTC =\n  (listID: string, newName: string) => (dispatch: Dispatch<ListsActionsType>) => {\n    dispatch(setAppStatusAC('loading'));\n    dispatch(setListStatusAC(listID, 'loading'));\n    appDataAPI\n      .updateTodoList(listID, newName)\n      .then(response => {\n        if (response.data.resultCode === ServerResultCodes.success) {\n          dispatch(changeListNameAC(listID, newName));\n          dispatch(setAppStatusAC('succeeded'));\n          dispatch(setListStatusAC(listID, 'idle'));\n        } else {\n          handleResolveWithServerErrorMessage(response.data, dispatch);\n        }\n      })\n      .catch(error => {\n        handleReject(error, dispatch);\n      });\n  };\n","import { Dispatch } from 'redux';\n\nimport { RootStateType } from '../store';\n\nimport { setAppErrorAC, setAppStatusAC } from './appReducer';\nimport {\n  AddListActionType,\n  RemoveListActionType,\n  setListsActionType,\n} from './listsActionsReducer';\n\nimport { appDataAPI } from 'api';\nimport { ServerResultCodes, taskPutRequestBodyType, TaskType } from 'api/types';\nimport {\n  handleReject,\n  handleResolveWithServerErrorMessage,\n} from 'utils/backendErrorHandler';\n\nconst initialState: TasksListType = {};\n\nexport type TasksListType = {\n  [key: string]: Array<TaskType>;\n};\n\nexport const tasksActionsReducer = (\n  state: TasksListType = initialState,\n  action: TasksActionsType,\n): TasksListType => {\n  switch (action.type) {\n    case 'ADD-TASK':\n      // action.payload.task.todoListId - where should I get the value ?\n      // new task always on top after app reload - is it server determined?\n      return {\n        ...state,\n        [action.payload.listID]: [action.payload.task, ...state[action.payload.listID]],\n      };\n\n    case 'REMOVE-TASK':\n      return {\n        ...state,\n        [action.payload.listID]: state[action.payload.listID].filter(\n          task => task.id !== action.payload.taskID,\n        ),\n      };\n\n    case 'UPDATE-TASK-DATA':\n      return {\n        ...state,\n        [action.payload.listID]: state[action.payload.listID].map(task =>\n          task.id === action.payload.taskID\n            ? { ...task, ...action.payload.newData }\n            : task,\n        ),\n      };\n\n    // case 'ADD-LIST':\n    //     return {...state, [action.payload.todoList.id]: []}\n\n    case 'REMOVE-LIST': {\n      const stateCopy = { ...state };\n      delete stateCopy[action.payload.listID];\n      return stateCopy;\n    }\n    // I've used (tasks || []).map... expression in Todolist JSX, so there's no need in setting empty arrays in this reducer\n    // case \"SET-LISTS\":\n    //     const stateCopy = {...state}\n    //     action.payload.lists.forEach(list => {\n    //         stateCopy[list.id] = []\n    //     })\n    //     return stateCopy\n\n    case 'SET-TASKS':\n      return { ...state, [action.payload.todoListID]: action.payload.tasks };\n    default:\n      return state;\n  }\n};\n\ntype TasksActionsType =\n  | AddTaskActionType\n  | RemoveTaskActionType\n  | AddListActionType\n  | RemoveListActionType\n  | setListsActionType\n  | setTasksActionType\n  | UpdateTaskDataActionType;\n\ntype AddTaskActionType = ReturnType<typeof addTaskAC>;\n\nexport const addTaskAC = (listID: string, task: TaskType) =>\n  ({\n    type: 'ADD-TASK',\n    payload: {\n      listID,\n      task,\n    },\n  } as const);\n\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>;\n\nexport const removeTaskAC = (listID: string, taskID: string) =>\n  ({\n    type: 'REMOVE-TASK',\n    payload: {\n      listID,\n      taskID,\n    },\n  } as const);\n\ntype UpdateTaskDataActionType = ReturnType<typeof updateTaskDataAC>;\n\nexport const updateTaskDataAC = (\n  listID: string,\n  taskID: string,\n  newData: UpdateTaskDataType,\n) =>\n  ({\n    type: 'UPDATE-TASK-DATA',\n    payload: {\n      listID,\n      taskID,\n      newData,\n    },\n  } as const);\n\ntype setTasksActionType = ReturnType<typeof setTasksAC>;\n\nexport const setTasksAC = (todoListID: string, tasks: Array<TaskType>) =>\n  ({\n    type: 'SET-TASKS',\n    payload: {\n      todoListID,\n      tasks,\n    },\n  } as const);\n\nexport const fetchTasksTC = (todoListID: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  appDataAPI\n    .getTasks(todoListID)\n    .then(response => {\n      dispatch(setTasksAC(todoListID, response.data.items));\n      dispatch(setAppStatusAC('succeeded'));\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\nexport const removeTaskTC = (listID: string, taskID: string) => (dispatch: Dispatch) => {\n  appDataAPI\n    .deleteTask(listID, taskID)\n    .then(response => {\n      dispatch(removeTaskAC(listID, taskID));\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\nexport const addTaskTC = (listID: string, taskName: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  appDataAPI\n    .createTask(listID, taskName)\n    .then(response => {\n      if (response.data.resultCode === ServerResultCodes.success) {\n        dispatch(addTaskAC(listID, response.data.data.item));\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleResolveWithServerErrorMessage<{ item: TaskType }>(response.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n\n// export type UpdateTaskDataType = {\n//     title?: string\n//     description?: string\n//     status?: TaskStatus\n//     priority?: TaskPriority\n//     startDate?: string\n//     deadline?: string\n// }\n// \"partial\" makes all properties optional, so we get the same result as UpdateTaskDataType above\n// no need to create one more data type\ntype UpdateTaskDataType = Partial<taskPutRequestBodyType>;\n\nexport const updateTaskTC =\n  (listID: string, taskID: string, newTaskData: UpdateTaskDataType) =>\n  (dispatch: Dispatch, getState: () => RootStateType) => {\n    const currentState = getState();\n    const taskToBeChanged = currentState.tasks[listID].find(task => task.id === taskID);\n\n    if (!taskToBeChanged) {\n      console.warn(`task with id ${taskID} not found in todo list ${listID}`);\n      return;\n    }\n\n    const requestPayload: taskPutRequestBodyType = {\n      deadline: taskToBeChanged.deadline,\n      description: taskToBeChanged.description,\n      priority: taskToBeChanged.priority,\n      startDate: taskToBeChanged.startDate,\n      status: taskToBeChanged.status,\n      title: taskToBeChanged.title,\n      ...newTaskData,\n    };\n\n    // type TodoPreview = Omit<Todo, \"addedDate\">;\n    // type TodoPreview = Pick<TaskType, \"deadline\" | \"description\" | \"priority\" | \"startDate\" | \"status\"  |\"title\">\n    // is there a way to \"filter\" task properties and create object for put request body automatically?\n    // let clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));\n    // debugger\n\n    appDataAPI\n      .updateTask(listID, taskID, requestPayload)\n      .then(response => {\n        if (response.data.resultCode === ServerResultCodes.success) {\n          dispatch(updateTaskDataAC(listID, taskID, newTaskData));\n        } else {\n          handleResolveWithServerErrorMessage(response.data, dispatch);\n        }\n      })\n      .catch(error => {\n        dispatch(setAppErrorAC(error.message));\n      });\n  };\n","import { Dispatch } from 'redux';\n\nimport { setAppStatusAC } from './appReducer';\n\nimport { authAPI } from 'api';\nimport { LoginDataType, ServerResultCodes } from 'api/types';\nimport {\n  handleReject,\n  handleResolveWithServerErrorMessage,\n} from 'utils/backendErrorHandler';\n\ntype iniLoginStateType = {\n  isLoggedIn: boolean;\n};\n\nconst iniState: iniLoginStateType = {\n  isLoggedIn: false,\n};\nexport const loginReducer = (state = iniState, action: ActionType) => {\n  switch (action.type) {\n    case 'loginReducer/SET-AUTH-STATE':\n      return { ...state, isLoggedIn: action.isLoggedIn };\n    default:\n      return state;\n  }\n};\n\ntype ActionType = ReturnType<typeof setAuthStateAC>;\n\nexport const setAuthStateAC = (newAuthState: boolean) =>\n  ({\n    type: 'loginReducer/SET-AUTH-STATE',\n    isLoggedIn: newAuthState,\n  } as const);\n\nexport const authTC = (authData: LoginDataType) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI\n    .login(authData)\n    .then(response => {\n      if (response.data.resultCode === ServerResultCodes.success) {\n        dispatch(setAuthStateAC(true));\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleResolveWithServerErrorMessage(response.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleReject(error, dispatch);\n    });\n};\n","import {tasksActionsReducer} from \"./reducers/tasksActionsReducer\";\r\nimport {listsActionsReducer} from \"./reducers/listsActionsReducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./reducers/appReducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {loginReducer} from \"./reducers/loginReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksActionsReducer,\r\n    lists: listsActionsReducer,\r\n    app: appReducer,\r\n    auth: loginReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n//useSelector which has store RootStateType\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, { memo, useState } from 'react';\n\nimport { IconButton, TextField } from '@material-ui/core';\nimport { AddBox } from '@material-ui/icons';\nimport styled from 'styled-components';\n\nimport { ComponentReturnType } from 'types/ComponentReturnType';\n\ntype addItemFormPropsType = {\n  addItemCallback: (itemName: string) => void;\n  disabled?: boolean;\n};\nconst AddItemFormWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  padding-bottom: 20px;\n`;\n\nexport const AddItemForm = memo(\n  ({ disabled = false, ...props }: addItemFormPropsType): ComponentReturnType => {\n    // console.log(\n    //   `AddItemForm with \"${props.addItemCallback.toString()}\" callback was called`,\n    // );\n    const [textFieldContent, setTextFieldContent] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n\n    const onTextFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (error) {\n        setError(false);\n      }\n      setTextFieldContent(event.currentTarget.value.trim());\n    };\n\n    const addItem = (): void => {\n      if (textFieldContent) {\n        props.addItemCallback(textFieldContent);\n      } else {\n        setError(true);\n      }\n      setTextFieldContent('');\n    };\n\n    const onEnterKeyPress = (event: React.KeyboardEvent<HTMLInputElement>): void => {\n      if (event.key === 'Enter') {\n        addItem();\n      }\n    };\n\n    return (\n      <AddItemFormWrapper>\n        <TextField\n          disabled={disabled}\n          label={error ? 'give it a name' : 'Title'}\n          size=\"small\"\n          variant=\"outlined\"\n          value={textFieldContent}\n          error={error}\n          onChange={onTextFieldChange}\n          onKeyPress={onEnterKeyPress}\n        />\n        <IconButton disabled={disabled} onClick={addItem}>\n          <AddBox />\n        </IconButton>\n      </AddItemFormWrapper>\n    );\n  },\n);\n","import React, { memo, useCallback, useState } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\n\nimport { ComponentReturnType } from 'types/ComponentReturnType';\n\ntype EditableSpanPropsType = {\n  disabled?: boolean;\n  itemName: string;\n  itemNameChangedCallback: (newName: string) => void;\n};\n\nexport const EditableSpan = memo(\n  ({ disabled = false, ...props }: EditableSpanPropsType): ComponentReturnType => {\n    // console.log(`editableSpan was called, text: ${props.itemName}`);\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [textFieldContent, setTextFieldContent] = useState('');\n    const [error, setError] = useState<boolean>(false);\n\n    const handleDoubleClick = (): void => {\n      if (disabled) return;\n      setEditMode(true);\n      setTextFieldContent(props.itemName);\n    };\n\n    const onTextFieldChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      setError(false);\n      setTextFieldContent(event.currentTarget.value);\n    };\n\n    const saveNewName = (): void => {\n      const cleanInputText = textFieldContent.trim();\n      if (cleanInputText) {\n        setEditMode(false);\n        props.itemNameChangedCallback(cleanInputText);\n        setTextFieldContent(props.itemName);\n      } else {\n        setTextFieldContent('');\n        setError(true);\n      }\n    };\n\n    const onEnterKeyPress = useCallback(\n      (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n          saveNewName();\n        }\n      },\n      [saveNewName],\n    );\n\n    return editMode ? (\n      <TextField\n        error={Boolean(error)}\n        helperText={error}\n        onKeyPress={onEnterKeyPress}\n        autoFocus\n        onBlur={saveNewName}\n        value={textFieldContent}\n        onChange={onTextFieldChange}\n      />\n    ) : (\n      <span onDoubleClick={handleDoubleClick}>{props.itemName}</span>\n    );\n  },\n);\n","import React, { memo, useCallback } from 'react';\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Backspace from '@material-ui/icons/Backspace';\nimport styled from 'styled-components';\n\nimport { TaskStatus } from '../api/types';\n\nimport { EditableSpan } from './EditableSpan';\n\ntype TaskPropsType = {\n  // listID: string\n  taskID: string;\n  taskName: string;\n  isDone: boolean;\n  changeStatus: (taskID: string, newStatus: TaskStatus) => void;\n  changeName: (taskID: string, newName: string) => void;\n  removeTask: (taskID: string) => void;\n};\n\nconst TaskNameWithCheckboxWrapper = styled.div`\n  //min-width: 260px;\n  //border-bottom: 2px solid gray;\n`;\n\nexport const Task = memo((props: TaskPropsType) => {\n  // console.log(`Task was called, title: ${props.taskName}`);\n\n  // const dispatch = useDispatch()\n\n  const changeStatus = useCallback(\n    event => {\n      const newTaskStatus = event.currentTarget.checked\n        ? TaskStatus.Completed\n        : TaskStatus.New;\n      props.changeStatus(props.taskID, newTaskStatus);\n    },\n    [props.changeStatus, props.taskID],\n  );\n\n  const changeName = useCallback(\n    (newName: string) => {\n      props.changeName(props.taskID, newName);\n    },\n    [props.changeName, props.taskID],\n  );\n\n  const removeTask = useCallback(() => {\n    props.removeTask(props.taskID);\n  }, [props.removeTask, props.taskID]);\n\n  return (\n    <>\n      <TaskNameWithCheckboxWrapper>\n        <Checkbox checked={props.isDone} color=\"primary\" onChange={changeStatus} />\n        <EditableSpan itemName={props.taskName} itemNameChangedCallback={changeName} />\n      </TaskNameWithCheckboxWrapper>\n\n      <IconButton\n        size=\"small\"\n        // variant={\"contained\"}\n        onClick={removeTask}\n      >\n        <Backspace color=\"primary\" />\n      </IconButton>\n    </>\n  );\n});\n","import React, { memo, useCallback, useEffect } from 'react';\n\n// import {Button, IconButton, List, ListItem} from \"@material-ui/core\";\n// tree-shaking is working out of the box??\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Delete from '@material-ui/icons/Delete';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\n\nimport { AddItemForm } from './AddItemForm';\nimport { EditableSpan } from './EditableSpan';\nimport { Task } from './Task';\n\nimport { TaskStatus, TaskType } from 'api/types';\nimport { EntityStatusType } from 'state/reducers/appReducer';\nimport {\n  changeFilterAC,\n  changeListNameTC,\n  removeListTC,\n  TasksFilterType,\n} from 'state/reducers/listsActionsReducer';\nimport {\n  addTaskTC,\n  fetchTasksTC,\n  removeTaskTC,\n  updateTaskTC,\n} from 'state/reducers/tasksActionsReducer';\nimport { useAppSelector } from 'state/store';\n\ntype TodolistPropsType = {\n  demo?: boolean;\n  listStatus: EntityStatusType;\n  todolistID: string;\n  title: string;\n  activeFilter: TasksFilterType;\n};\n\nconst TodolistCard = styled.div`\n  min-width: 300px;\n`;\n\nconst FilterButtonsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-right: 0;\n`;\n\nexport const Todolist = memo(\n  ({ demo = false, listStatus, ...props }: TodolistPropsType) => {\n    // console.log(`todolist was called, title: ${props.title}`);\n\n    // const listStatus = useSelector<RootStateType, EntityStatusType>(state => state.lists.)\n    const tasks = useAppSelector<TaskType[]>(state => state.tasks[props.todolistID]);\n    // const allTasks = useSelector(getTasks);\n    // const tasks = allTasks[props.todolistID];\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n      if (demo) return;\n      dispatch(fetchTasksTC(props.todolistID));\n    }, [dispatch, props.todolistID, demo]);\n\n    let filteredTasks = tasks;\n    if (props.activeFilter === 'active') {\n      filteredTasks = tasks.filter(task => task.status === TaskStatus.New);\n    }\n    if (props.activeFilter === 'completed') {\n      filteredTasks = tasks.filter(task => task.status === TaskStatus.Completed);\n    }\n\n    const changeTaskStatus = useCallback(\n      (taskID: string, newStatus: TaskStatus) => {\n        dispatch(updateTaskTC(props.todolistID, taskID, { status: newStatus }));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    const addTask = useCallback(\n      (name: string) => {\n        dispatch(addTaskTC(props.todolistID, name));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    const removeTask = useCallback(\n      (taskID: string) => {\n        dispatch(removeTaskTC(props.todolistID, taskID));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    const changeFilter = useCallback(\n      (newFilterValue: TasksFilterType) => {\n        dispatch(changeFilterAC(props.todolistID, newFilterValue));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    const deleteTodolist = useCallback(() => {\n      const action = removeListTC(props.todolistID);\n      dispatch(action);\n    }, [dispatch, props.todolistID]);\n\n    const changeTaskName = useCallback(\n      (taskID: string, newName: string) => {\n        dispatch(updateTaskTC(props.todolistID, taskID, { title: newName }));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    const changeListName = useCallback(\n      (newName: string) => {\n        dispatch(changeListNameTC(props.todolistID, newName));\n      },\n      [dispatch, props.todolistID],\n    );\n\n    return (\n      <TodolistCard>\n        <h3>\n          <EditableSpan itemName={props.title} itemNameChangedCallback={changeListName} />\n          <IconButton disabled={listStatus === 'loading'} onClick={deleteTodolist}>\n            <Delete />\n          </IconButton>\n        </h3>\n        <AddItemForm disabled={listStatus === 'loading'} addItemCallback={addTask} />\n        <List disablePadding>\n          {(filteredTasks || []).map(task => (\n            <ListItem\n              disableGutters\n              key={task.id}\n              style={{ justifyContent: 'space-between' }}\n            >\n              <Task\n                taskID={task.id}\n                isDone={task.status === TaskStatus.Completed}\n                changeName={changeTaskName}\n                taskName={task.title}\n                changeStatus={changeTaskStatus}\n                removeTask={removeTask}\n              />\n            </ListItem>\n          ))}\n        </List>\n        <FilterButtonsWrapper>\n          <Button\n            variant=\"contained\"\n            color={props.activeFilter === 'all' ? 'primary' : 'default'}\n            onClick={() => changeFilter('all')}\n          >\n            All\n          </Button>\n          <Button\n            variant=\"contained\"\n            color={props.activeFilter === 'active' ? 'primary' : 'default'}\n            onClick={() => changeFilter('active')}\n          >\n            Active\n          </Button>\n          <Button\n            variant=\"contained\"\n            color={props.activeFilter === 'completed' ? 'primary' : 'default'}\n            onClick={() => changeFilter('completed')}\n          >\n            Completed\n          </Button>\n        </FilterButtonsWrapper>\n      </TodolistCard>\n    );\n  },\n);\n","import React, { memo, useCallback } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { useDispatch } from 'react-redux';\n\nimport { addListTC, TodoListInAppType } from '../state/reducers/listsActionsReducer';\nimport { useAppSelector } from '../state/store';\n\nimport { AddItemForm } from './AddItemForm';\nimport { Todolist } from './Todolist';\n\ntype AllTodoListsPropsType = {\n  demo?: boolean;\n};\n\nexport const AllTodoLists = memo(({ demo = false }: AllTodoListsPropsType) => {\n  // const todolists = useSelector<RootStateType, TodoListInAppType[]>(state => state.lists);\n  const todolists = useAppSelector<TodoListInAppType[]>(state => state.lists);\n\n  const dispatch = useDispatch();\n\n  const addTodolist = useCallback(\n    (listName: string) => {\n      if (listName) {\n        dispatch(addListTC(listName));\n      }\n    },\n    [dispatch],\n  );\n\n  return (\n    <>\n      <Grid container style={{ paddingTop: '20px' }}>\n        <AddItemForm addItemCallback={addTodolist} />\n      </Grid>\n      <Grid container spacing={3}>\n        {todolists.map(list => (\n          <Grid item key={list.id}>\n            <Paper style={{ padding: '20px' }} elevation={10}>\n              <Todolist\n                demo={demo}\n                listStatus={list.entityStatus}\n                todolistID={list.id}\n                title={list.title}\n                activeFilter={list.activeFilter}\n              />\n            </Paper>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n});\n","import React from 'react';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport { useDispatch } from 'react-redux';\n\nimport { setAppErrorAC } from '../state/reducers/appReducer';\nimport { useAppSelector } from '../state/store';\n\nconst Alert = (props: AlertProps) => (\n  <MuiAlert elevation={6} variant=\"filled\" {...props} />\n);\n\nexport const ErrorSnackbar = () => {\n  const error = useAppSelector<string | null>(state => state.app.error);\n  const isOpen = error !== null;\n\n  const dispatch = useDispatch();\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAppErrorAC(null));\n  };\n\n  return (\n    <Snackbar open={isOpen} autoHideDuration={5000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\">\n        {error && error}\n      </Alert>\n    </Snackbar>\n  );\n};\n","import React from 'react';\n\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  TextField,\n} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport { authTC } from '../state/reducers/loginReducer';\nimport { useAppSelector } from '../state/store';\n\nexport const Login = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn);\n\n  const formik = useFormik({\n    validate: values => {\n      if (!values.email) {\n        return { email: 'email required' };\n      }\n      if (!values.password) {\n        return { password: 'password required' };\n      }\n    },\n    initialValues: {\n      email: 'free@samuraijs.com',\n      password: 'free',\n      rememberMe: false,\n    },\n    onSubmit: values => {\n      dispatch(authTC(values));\n    },\n  });\n\n  // if(isLoggedIn){\n  //     navigate(\"/\")\n  // }\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item xs={4}>\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                sign up on <a href=\"https://social-network.samuraijs.com/\">samuraiJS</a>\n              </p>\n              <p>or use the default credentials</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                type=\"email\"\n                {...formik.getFieldProps('email')}\n                error={Boolean(formik.errors.email)}\n                helperText={formik.errors.email}\n              />\n              <TextField\n                label=\"Password\"\n                margin=\"normal\"\n                type={formik.values.password ? 'password' : ''}\n                {...formik.getFieldProps('password')}\n                error={Boolean(formik.errors.password)}\n                helperText={formik.errors.password}\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    {...formik.getFieldProps('rememberMe')}\n                    checked={formik.values.rememberMe}\n                  />\n                }\n                label=\"remember me\"\n              />\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={Boolean(formik.errors.password) || Boolean(formik.errors.email)}\n              >\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import { EntityStatusType } from '../reducers/appReducer';\nimport { RootStateType } from '../store';\n\nexport const getAppStatus = (state: RootStateType): EntityStatusType =>\n  state.app.appStatus;\n","import React, { useEffect } from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { Menu } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Routes } from 'react-router-dom';\n\nimport { AllTodoLists } from 'components/AllTodoLists';\nimport { ErrorSnackbar } from 'components/ErrorSnackbar';\nimport { Login } from 'components/Login';\nimport { fetchListsTC } from 'state/reducers/listsActionsReducer';\nimport { getAppStatus } from 'state/selectors';\nimport { ComponentReturnType } from 'types/ComponentReturnType';\n\ntype AppPropsType = {\n  demo?: boolean;\n};\n\nexport const App = ({ demo = false }: AppPropsType): ComponentReturnType => {\n  // console.log('app was called');\n  const appStatus = useSelector(getAppStatus);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (demo) return;\n    dispatch(fetchListsTC());\n  }, [dispatch, demo]);\n\n  const showProgressBar = appStatus === 'loading';\n\n  return (\n    <div>\n      <ErrorSnackbar />\n      <AppBar position=\"static\">\n        <Toolbar style={{ justifyContent: 'space-between' }}>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">Todolists</Typography>\n          <Button color=\"inherit\" variant=\"outlined\">\n            Login\n          </Button>\n        </Toolbar>\n        {showProgressBar && <LinearProgress color=\"secondary\" />}\n      </AppBar>\n      <Container fixed>\n        <Routes>\n          <Route path=\"/\" element={<AllTodoLists demo={demo} />} />\n          <Route path=\"/loginReducer\" element={<Login />} />\n        </Routes>\n      </Container>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './state/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}