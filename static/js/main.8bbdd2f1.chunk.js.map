{"version":3,"sources":["api/it-inc-api.ts","components/AddItemForm.tsx","state/appReducer.ts","utils/backendErrorHandler.ts","state/listsActionsReducer.ts","components/EditableSpan.tsx","state/tasksActionsReducer.ts","components/Task.tsx","components/Todolist.tsx","components/ErrorSnackbar.tsx","App.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["TaskStatus","TaskPriority","AddItemFormWrapper","styled","div","AddItemForm","React","memo","disabled","props","console","log","addItemCallback","toString","useState","inputText","setInputText","inputError","setInputError","addItem","useCallback","cleanString","trim","keyPressWithinInputHandler","event","key","TextField","label","size","variant","value","error","onChange","currentTarget","onKeyPress","IconButton","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","process","REACT_APP_API_KEY","APP_ACTIONS_TYPE","backendAPI","todolistId","title","put","delete","name","post","get","todolistID","taskID","requestPayload","iniAppState","appStatus","setAppErrorAC","errorMessage","type","APP_SET_ERROR","setAppStatusAC","newStatus","APP_SET_STATUS","status","handleResolveWithServerErrorMessage","data","dispatch","messages","length","handleReject","message","initialState","setListStatusAC","listID","payload","entityStatus","EditableSpan","itemName","editMode","setEditMode","setError","inputChangeHandler","saveNewName","cleanInputText","itemNameChangedCallback","enterPressHandler","Boolean","helperText","autoFocus","onBlur","onDoubleClick","updateTaskTC","newTaskData","getState","taskToBeChanged","tasks","find","task","id","deadline","description","priority","startDate","then","response","resultCode","newData","updateTaskDataAC","catch","warn","Task","taskName","changeStatus","newTaskStatus","checked","Completed","New","changeName","newName","removeTask","TaskNameWithCheckboxWrapper","Checkbox","isDone","color","Backspace","TodolistCard","FilterButtonsWrapper","Todolist","demo","listStatus","useSelector","state","useDispatch","useEffect","todoListID","setTasksAC","items","filteredTasks","activeFilter","filter","changeTaskStatus","addTask","addTaskAC","item","removeTaskAC","removeTaskTC","changeFilter","newFilterValue","deleteTodolist","action","removeListAC","changeTaskName","changeListName","changeListNameAC","changeListNameTC","Delete","List","disablePadding","map","ListItem","disableGutters","style","justifyContent","Button","Alert","elevation","ErrorSnackbar","app","isOpen","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","App","todolists","lists","addTodolist","listName","todoList","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","Grid","container","paddingTop","spacing","list","Paper","padding","window","location","hostname","match","rootReducer","combineReducers","stateCopy","newInAppList","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8bbdd2f1.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {itIncAPI} from \"./apiKey\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': process.env.REACT_APP_API_KEY as string\r\n    }\r\n})\r\n\r\nexport enum TaskStatus {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft,\r\n}\r\n\r\nexport enum TaskPriority {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgent,\r\n    Someday,\r\n}\r\n\r\nexport type TodoListOnServerType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatus\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type BaseResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: T\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    error: null | string\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\n\r\nexport type taskPutRequestBodyType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatus\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nexport const backendAPI = {\r\n    updateTodoList(todolistId: string, title: string) {\r\n        return instance.put<BaseResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    deleteTodoList(todolistId: string) {\r\n        return instance.delete<BaseResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    createTodoList(name: string) {\r\n        return instance.post<BaseResponseType<{ item: TodoListOnServerType }>>('todo-lists', {title: name})\r\n    },\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListOnServerType>>('todo-lists')\r\n    },\r\n    createTask(todolistID: string, name: string) {\r\n        return instance.post<BaseResponseType<{ item: TaskType }>>(`todo-lists/${todolistID}/tasks`, {title: name})\r\n    },\r\n    getTasks(todolistID: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistID}/tasks`)\r\n    },\r\n    updateTask(todolistID: string, taskID: string, requestPayload: taskPutRequestBodyType) {\r\n        return instance.put<BaseResponseType<{ item: TaskType }>>(`todo-lists/${todolistID}/tasks/${taskID}`, requestPayload)\r\n    },\r\n    deleteTask(todolistID: string, taskID: string) {\r\n        return instance.delete<BaseResponseType>(`/todo-lists/${todolistID}/tasks/${taskID}`)\r\n\r\n    }\r\n}","import React, {useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport styled from \"styled-components\";\r\n\r\ntype addItemFormPropsType = {\r\n    addItemCallback: (itemName: string) => void\r\n    disabled?: boolean\r\n}\r\nconst AddItemFormWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-bottom: 20px;\r\n`\r\n\r\nexport const AddItemForm = React.memo(({disabled = false, ...props}: addItemFormPropsType) => {\r\n    console.log(`AddItemForm with \"${props.addItemCallback.toString()}\" callback was called`)\r\n    const [inputText, setInputText] = useState<string>('')\r\n    const [inputError, setInputError] = useState<boolean>(false)\r\n\r\n    const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (inputError) {\r\n            setInputError(false)\r\n        }\r\n        setInputText(event.currentTarget.value)\r\n    }\r\n\r\n    const addItem = useCallback(() => {\r\n        const cleanString = inputText.trim()\r\n        if (cleanString) {\r\n            props.addItemCallback(cleanString)\r\n        } else {\r\n            setInputError(true)\r\n        }\r\n        setInputText('')\r\n    },[inputText, props.addItemCallback])\r\n\r\n    const keyPressWithinInputHandler = useCallback((event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }, [addItem])\r\n\r\n\r\n    return (\r\n        <AddItemFormWrapper>\r\n            <TextField\r\n                disabled={disabled}\r\n                label={inputError ? 'give it a name' : 'Title'}\r\n                size={\"small\"}\r\n                variant={\"outlined\"}\r\n                value={inputText}\r\n                error={inputError}\r\n                onChange={inputChangeHandler}\r\n                onKeyPress={keyPressWithinInputHandler}/>\r\n            <IconButton disabled={disabled} onClick={addItem}><AddBox/></IconButton>\r\n        </AddItemFormWrapper>\r\n    );\r\n});\r\n\r\n","export type EntityStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type IniAppStateType = {\r\n    appStatus: EntityStatusType\r\n    error: string | null\r\n}\r\n\r\nexport enum APP_ACTIONS_TYPE {\r\n    APP_SET_STATUS = 'APP/SET-STATUS',\r\n    APP_SET_ERROR = 'APP/SET-ERROR',\r\n}\r\n\r\nconst iniAppState: IniAppStateType = {\r\n    appStatus: 'idle',\r\n    error: null,\r\n}\r\n\r\ntype AppActionsType = SetAppErrorActionType | SetAppStatusActionType\r\n\r\nexport const appReducer = ( state: IniAppStateType = iniAppState, action: AppActionsType) : IniAppStateType => {\r\n    switch (action.type){\r\n        case APP_ACTIONS_TYPE.APP_SET_STATUS:\r\n            return {...state, appStatus: action.status}\r\n        case APP_ACTIONS_TYPE.APP_SET_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\ntype SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport const setAppErrorAC = (errorMessage: string | null) => {\r\n    return{\r\n        type: APP_ACTIONS_TYPE.APP_SET_ERROR,\r\n        error: errorMessage,\r\n    } as const\r\n}\r\n\r\ntype SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport const setAppStatusAC = (newStatus: EntityStatusType) => {\r\n    return{\r\n        type: APP_ACTIONS_TYPE.APP_SET_STATUS,\r\n        status: newStatus,\r\n    } as const\r\n}","import {setAppErrorAC, setAppStatusAC} from \"../state/appReducer\";\r\nimport {BaseResponseType} from \"../api/it-inc-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const handleResolveWithServerErrorMessage = (data: BaseResponseType, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\nexport const handleReject = (error: AxiosError, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {backendAPI, TodoListOnServerType} from \"../api/it-inc-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {EntityStatusType, setAppErrorAC, setAppStatusAC} from \"./appReducer\";\r\nimport {handleReject} from \"../utils/backendErrorHandler\";\r\n\r\n\r\nexport type TasksFilterType = 'all' | 'completed' | 'active'\r\n\r\nexport type TodoListInAppType = TodoListOnServerType & {\r\n    activeFilter: TasksFilterType\r\n    entityStatus: EntityStatusType\r\n}\r\n\r\nlet initialState: Array<TodoListInAppType> = []\r\n\r\n\r\nexport const listsActionsReducer = (state: Array<TodoListInAppType> = initialState, action: ListsActionsType): Array<TodoListInAppType> => {\r\n    switch (action.type) {\r\n        case 'ADD-LIST': {\r\n            const newInAppList: TodoListInAppType = {\r\n                ...action.payload.todoList,\r\n                activeFilter: 'all',\r\n                entityStatus: 'idle'\r\n            }\r\n            return [newInAppList, ...state]\r\n        }\r\n        case 'REMOVE-LIST':\r\n            return state.filter(list => list.id !== action.payload.listID)\r\n        case 'CHANGE-FILTER':\r\n            return state.map(list => list.id === action.payload.listID ? {\r\n                ...list,\r\n                activeFilter: action.payload.activeFilter\r\n            } : list)\r\n        case 'CHANGE-LIST-NAME':\r\n            return state.map(list => list.id === action.payload.listID ? {\r\n                ...list,\r\n                title: action.payload.newName\r\n            } : list)\r\n        case 'SET-LISTS':\r\n            return action.payload.lists.map(list => ({...list, activeFilter: 'all', entityStatus: 'idle'}))\r\n        case \"SET-LIST-STATUS\":\r\n            return state.map(list => list.id === action.payload.listID ? {...list, entityStatus: action.payload.entityStatus} : list)\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\n\r\ntype ListsActionsType =\r\n    AddListActionType\r\n    | RemoveListActionType\r\n    | ChangeFilterActionType\r\n    | ChangeListNameActionType\r\n    | setListsActionType\r\n    | setListStatusActionType\r\n\r\nexport type RemoveListActionType = ReturnType<typeof removeListAC>\r\nexport const removeListAC = (listID: string) => {\r\n    return {\r\n        type: 'REMOVE-LIST',\r\n        payload: {\r\n            listID: listID,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type AddListActionType = ReturnType<typeof addListAC>\r\nexport const addListAC = (todoList: TodoListOnServerType) => {\r\n    return {\r\n        type: 'ADD-LIST',\r\n        payload: {\r\n            todoList,\r\n        },\r\n    } as const\r\n}\r\n\r\ntype ChangeFilterActionType = ReturnType<typeof changeFilterAC>\r\nexport const changeFilterAC = (listID: string, filter: TasksFilterType) => {\r\n    return {\r\n        type: 'CHANGE-FILTER',\r\n        payload: {\r\n            listID: listID,\r\n            activeFilter: filter\r\n        }\r\n    } as const\r\n}\r\n\r\ntype ChangeListNameActionType = ReturnType<typeof changeListNameAC>\r\nexport const changeListNameAC = (listID: string, newName: string) => {\r\n    return {\r\n        type: 'CHANGE-LIST-NAME',\r\n        payload: {\r\n            listID,\r\n            newName,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type setListsActionType = ReturnType<typeof setListsAC>\r\nexport const setListsAC = (lists: Array<TodoListOnServerType>) => {\r\n    return {\r\n        type: 'SET-LISTS',\r\n        payload: {\r\n            lists,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type setListStatusActionType = ReturnType<typeof setListStatusAC>\r\nexport const setListStatusAC = (listID: string, newStatus: EntityStatusType) => {\r\n    return {\r\n        type: 'SET-LIST-STATUS',\r\n        payload: {\r\n            listID,\r\n            entityStatus: newStatus,\r\n        },\r\n    } as const\r\n}\r\n\r\n\r\nexport const fetchListsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        backendAPI.getTodoLists()\r\n            .then(response => {\r\n                dispatch(setListsAC(response.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error =>{\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeListTC = (listID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setListStatusAC(listID, 'loading'))\r\n        backendAPI.deleteTodoList(listID)\r\n            .then(response => {\r\n                dispatch(removeListAC(listID))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setListStatusAC(listID, 'idle'))\r\n\r\n            })\r\n            .catch(error =>{\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const addListTC = (name: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        backendAPI.createTodoList(name)\r\n            .then(response => {\r\n                dispatch(addListAC(response.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error =>{\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeListNameTC = (listID: string, newName: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setListStatusAC(listID, 'loading'))\r\n        backendAPI.updateTodoList(listID, newName)\r\n            .then(response => {\r\n                dispatch(changeListNameAC(listID, newName))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setListStatusAC(listID, 'idle'))\r\n            })\r\n            .catch(error =>{\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}","import React, {useCallback, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    disabled?: boolean\r\n    itemName: string\r\n    itemNameChangedCallback: (newName: string) => void\r\n}\r\n\r\n\r\nexport const EditableSpan = React.memo(({disabled = false, ...props}: EditableSpanPropsType) => {\r\n    console.log(`editableSpan was called, text: ${props.itemName}`)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputText, setInputText] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const itemDoubleClickHandler = () => {\r\n        if(disabled) return\r\n        setEditMode(true)\r\n        setInputText(props.itemName)\r\n    }\r\n\r\n    const inputChangeHandler = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setInputText(event.currentTarget.value)\r\n    }, [])\r\n\r\n    const saveNewName = useCallback(() => {\r\n        const cleanInputText = inputText.trim()\r\n        if (cleanInputText) {\r\n            setEditMode(false)\r\n            props.itemNameChangedCallback(cleanInputText)\r\n            setInputText(props.itemName)\r\n        } else {\r\n            setInputText('')\r\n            setError(true)\r\n        }\r\n\r\n    }, [inputText])\r\n\r\n    const enterPressHandler = useCallback((event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            saveNewName()\r\n        }\r\n    }, [saveNewName])\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                // disabled={disabled}\r\n                error={Boolean(error)}\r\n                helperText={error}\r\n                onKeyPress={enterPressHandler}\r\n                autoFocus={true}\r\n                onBlur={saveNewName}\r\n                value={inputText}\r\n                onChange={inputChangeHandler}\r\n            /> :\r\n            <span\r\n                onDoubleClick={itemDoubleClickHandler}>{props.itemName}\r\n            </span>\r\n\r\n    );\r\n});\r\n\r\n","import {AddListActionType, RemoveListActionType, setListsActionType} from \"./listsActionsReducer\";\r\nimport {backendAPI, TaskType, taskPutRequestBodyType} from \"../api/it-inc-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"./store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./appReducer\";\r\nimport {handleReject, handleResolveWithServerErrorMessage} from \"../utils/backendErrorHandler\";\r\n\r\n\r\nlet initialState: TasksListType = {}\r\n\r\nexport type TasksListType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport const tasksActionsReducer = (state: TasksListType = initialState, action: TasksActionsType): TasksListType => {\r\n    switch (action.type) {\r\n\r\n        case 'ADD-TASK':\r\n            // action.payload.task.todoListId - where should I get the value ?\r\n            //new task always on top after app reload - is it server determined?\r\n            return {\r\n                ...state,\r\n                [action.payload.listID]: [action.payload.task, ...state[action.payload.listID]]\r\n            }\r\n\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.listID]: state[action.payload.listID].filter(task => task.id !== action.payload.taskID)\r\n            }\r\n\r\n        case \"UPDATE-TASK-DATA\":\r\n            return {\r\n                ...state, [action.payload.listID]: state[action.payload.listID]\r\n                    .map(task => task.id === action.payload.taskID ? {...task, ...action.payload.newData} : task)\r\n            }\r\n\r\n        // case 'ADD-LIST':\r\n        //     return {...state, [action.payload.todoList.id]: []}\r\n\r\n        case 'REMOVE-LIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.payload.listID]\r\n            return stateCopy\r\n        }\r\n        //I've used (tasks || []).map... expression in Todolist JSX, so there's no need in setting empty arrays in this reducer\r\n        // case \"SET-LISTS\":\r\n        //     const stateCopy = {...state}\r\n        //     action.payload.lists.forEach(list => {\r\n        //         stateCopy[list.id] = []\r\n        //     })\r\n        //     return stateCopy\r\n\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.payload.todoListID]: action.payload.tasks}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype TasksActionsType =\r\n    AddTaskActionType\r\n    | RemoveTaskActionType\r\n    | AddListActionType\r\n    | RemoveListActionType\r\n    | setListsActionType\r\n    | setTasksActionType\r\n    | UpdateTaskDataActionType\r\n\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\n\r\nexport const addTaskAC = (listID: string, task: TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            listID,\r\n            task,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\n\r\nexport const removeTaskAC = (listID: string, taskID: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            listID: listID,\r\n            taskID: taskID,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype UpdateTaskDataActionType = ReturnType<typeof updateTaskDataAC>\r\n\r\nexport const updateTaskDataAC = (listID: string, taskID: string, newData: UpdateTaskDataType) => {\r\n    return {\r\n        type: 'UPDATE-TASK-DATA',\r\n        payload: {\r\n            listID,\r\n            taskID,\r\n            newData,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype setTasksActionType = ReturnType<typeof setTasksAC>\r\n\r\nexport const setTasksAC = (todoListID: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        payload: {\r\n            todoListID,\r\n            tasks,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport const fetchTasksTC = (todoListID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        backendAPI.getTasks(todoListID)\r\n            .then(response => {\r\n                dispatch(setTasksAC(todoListID, response.data.items))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const removeTaskTC = (listID: string, taskID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        backendAPI.deleteTask(listID, taskID)\r\n            .then(response => {\r\n                dispatch(removeTaskAC(listID, taskID))\r\n            })\r\n            .catch(error => {\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (listID: string, taskName: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        backendAPI.createTask(listID, taskName)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(listID, response.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleResolveWithServerErrorMessage(response.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleReject(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// export type UpdateTaskDataType = {\r\n//     title?: string\r\n//     description?: string\r\n//     status?: TaskStatus\r\n//     priority?: TaskPriority\r\n//     startDate?: string\r\n//     deadline?: string\r\n// }\r\n//\"partial\" makes all properties optional, so we get the same result as UpdateTaskDataType above\r\n//no need to create one more data type\r\ntype UpdateTaskDataType = Partial<taskPutRequestBodyType>\r\n\r\nexport const updateTaskTC = (listID: string, taskID: string, newTaskData: UpdateTaskDataType) => {\r\n\r\n    return (dispatch: Dispatch, getState: () => RootStateType) => {\r\n        const currentState = getState()\r\n        const taskToBeChanged = currentState.tasks[listID].find(task => task.id === taskID)\r\n\r\n        if (!taskToBeChanged) {\r\n            console.warn(`task with id ${taskID} not found in todo list ${listID}`)\r\n            return\r\n        }\r\n\r\n        const requestPayload: taskPutRequestBodyType = {\r\n            deadline: taskToBeChanged.deadline,\r\n            description: taskToBeChanged.description,\r\n            priority: taskToBeChanged.priority,\r\n            startDate: taskToBeChanged.startDate,\r\n            status: taskToBeChanged.status,\r\n            title: taskToBeChanged.title,\r\n            ...newTaskData,\r\n        }\r\n\r\n        // type TodoPreview = Omit<Todo, \"addedDate\">;\r\n        // type TodoPreview = Pick<TaskType, \"deadline\" | \"description\" | \"priority\" | \"startDate\" | \"status\"  |\"title\">\r\n        //is there a way to \"filter\" task properties and create object for put request body automatically?\r\n        //let clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));\r\n        // debugger\r\n\r\n        backendAPI.updateTask(listID, taskID, requestPayload)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(updateTaskDataAC(listID, taskID, newTaskData))\r\n                } else {\r\n                    handleResolveWithServerErrorMessage(response.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppErrorAC(error.message))\r\n            })\r\n    }\r\n}","import React, {useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Backspace} from \"@material-ui/icons\";\r\nimport styled from \"styled-components\";\r\nimport {TaskStatus} from \"../api/it-inc-api\";\r\n\r\ntype TaskPropsType = {\r\n    // listID: string\r\n    taskID: string\r\n    taskName: string\r\n    isDone: boolean\r\n    changeStatus: (taskID:string, newStatus: TaskStatus) => void\r\n    changeName: (taskID: string, newName: string) => void\r\n    removeTask: (taskID: string) => void\r\n\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    console.log(`Task was called, title: ${props.taskName}`)\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    const changeStatus = useCallback((event)=>{\r\n        const newTaskStatus = event.currentTarget.checked ? TaskStatus.Completed : TaskStatus.New\r\n        props.changeStatus(props.taskID, newTaskStatus)\r\n    },[props.changeStatus, props.taskID])\r\n\r\n    const changeName = useCallback((newName: string)=>{\r\n        props.changeName(props.taskID, newName)\r\n    },[props.changeName, props.taskID])\r\n\r\n    const removeTask = useCallback(()=>{\r\n        props.removeTask(props.taskID)\r\n    },[props.removeTask, props.taskID])\r\n\r\n    return <>\r\n        <TaskNameWithCheckboxWrapper>\r\n            <Checkbox checked={props.isDone}\r\n                      color={\"primary\"}\r\n                      onChange={changeStatus}/>\r\n            <EditableSpan itemName={props.taskName}\r\n                          itemNameChangedCallback={changeName}/>\r\n        </TaskNameWithCheckboxWrapper>\r\n\r\n        <IconButton size={\"small\"}\r\n            // variant={\"contained\"}\r\n                    onClick={removeTask}><Backspace\r\n            color={\"primary\"}\r\n        /></IconButton>\r\n    </>\r\n})\r\n\r\nconst TaskNameWithCheckboxWrapper = styled.div`\r\n  //min-width: 260px;\r\n  //border-bottom: 2px solid gray;\r\n`","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport styled from \"styled-components\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../state/store\";\r\nimport {addTaskTC, fetchTasksTC, removeTaskTC, updateTaskTC} from \"../state/tasksActionsReducer\";\r\nimport {changeFilterAC, changeListNameTC, removeListTC, TasksFilterType} from \"../state/listsActionsReducer\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatus, TaskType} from \"../api/it-inc-api\";\r\nimport {EntityStatusType} from \"../state/appReducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    demo?: boolean\r\n    listStatus: EntityStatusType\r\n    todolistID: string\r\n    title: string\r\n    activeFilter: TasksFilterType\r\n}\r\n\r\n\r\nconst TodolistCard = styled.div`\r\n  min-width: 300px;\r\n`\r\n\r\nconst FilterButtonsWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding-right: 0;\r\n`\r\n\r\n\r\nexport const Todolist = React.memo(({demo = false, listStatus, ...props}: TodolistPropsType) => {\r\n    console.log(`todolist was called, title: ${props.title}`)\r\n    const tasks = useSelector<RootStateType, Array<TaskType>>(state => state.tasks[props.todolistID])\r\n    // const listStatus = useSelector<RootStateType, EntityStatusType>(state => state.lists.)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        if(demo) return\r\n        dispatch(fetchTasksTC(props.todolistID))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    let filteredTasks = tasks\r\n    if (props.activeFilter === 'active') {\r\n        filteredTasks = tasks.filter(task => task.status===TaskStatus.New)\r\n    }\r\n    if (props.activeFilter === 'completed') {\r\n        filteredTasks = tasks.filter(task => task.status===TaskStatus.Completed)\r\n    }\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, newStatus: TaskStatus) => {\r\n        dispatch(updateTaskTC(props.todolistID, taskID, {status: newStatus}))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const addTask = useCallback((name: string) => {\r\n        dispatch(addTaskTC(props.todolistID, name))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const removeTask = useCallback((taskID: string) => {\r\n        dispatch(removeTaskTC(props.todolistID, taskID))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const changeFilter = useCallback((newFilterValue: TasksFilterType) => {\r\n        dispatch(changeFilterAC(props.todolistID, newFilterValue))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const deleteTodolist = useCallback(() => {\r\n        let action = removeListTC(props.todolistID)\r\n        dispatch(action)\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const changeTaskName = useCallback((taskID: string, newName: string) => {\r\n        dispatch(updateTaskTC(props.todolistID, taskID, {title: newName}))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const changeListName = useCallback((newName: string) => {\r\n        dispatch(changeListNameTC(props.todolistID, newName))\r\n    }, [dispatch, props.todolistID])\r\n\r\n\r\n    return (\r\n        <TodolistCard>\r\n            <h3>\r\n                <EditableSpan itemName={props.title} itemNameChangedCallback={changeListName}/>\r\n                <IconButton disabled={listStatus === 'loading'} onClick={deleteTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm disabled={listStatus==='loading'} addItemCallback={addTask}/>\r\n            <List disablePadding>\r\n                {\r\n                    (filteredTasks || []).map(task =>\r\n                        <ListItem disableGutters key={task.id}\r\n                                  style={{justifyContent: \"space-between\"}}\r\n                        >\r\n                            <Task taskID={task.id}\r\n                                  isDone={task.status === TaskStatus.Completed}\r\n                                  changeName={changeTaskName}\r\n                                  taskName={task.title}\r\n                                  changeStatus={changeTaskStatus}\r\n                                  removeTask={removeTask}\r\n                            />\r\n                        </ListItem>)\r\n\r\n                }\r\n                {/*< Divider variant=\"inset\" component=\"li\"/>*/}\r\n            </List>\r\n            <FilterButtonsWrapper>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"all\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('all')}>All\r\n                </Button>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"active\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('active')}>Active\r\n                </Button>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"completed\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('completed')}>Completed\r\n                </Button>\r\n            </FilterButtonsWrapper>\r\n\r\n        </TodolistCard>\r\n    )\r\n})\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../state/store\";\r\nimport {setAppErrorAC} from \"../state/appReducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useSelector<RootStateType, string | null>(state => state.app.error)\r\n    const isOpen = (error !== null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n        // setOpen(false);\r\n    };\r\n\r\n\r\n    return (\r\n\r\n        <Snackbar open={isOpen} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error && error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addListTC, fetchListsTC, TodoListInAppType} from \"./state/listsActionsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./state/store\";\r\nimport {Todolist} from \"./components/Todolist\";\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar\";\r\nimport {EntityStatusType} from \"./state/appReducer\";\r\n\r\n\r\ntype AppPropsType = {\r\n   demo?: boolean\r\n}\r\n\r\n\r\nexport const App = ({demo = false, ...props}: AppPropsType) => {\r\n    console.log(\"app was called\")\r\n    const todolists = useSelector<RootStateType, TodoListInAppType[]>(state => state.lists);\r\n    const appStatus = useSelector<RootStateType, EntityStatusType>(state => state.app.appStatus)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(()=>{\r\n        if(demo) return\r\n        dispatch(fetchListsTC())\r\n    },[dispatch])\r\n\r\n    const addTodolist = useCallback((listName: string) => {\r\n        if (listName) {\r\n            dispatch(addListTC(listName))\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n                {appStatus === 'loading' && < LinearProgress color=\"secondary\"/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{paddingTop: \"20px\"}}>\r\n                    <AddItemForm addItemCallback={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(list => {\r\n                            return (\r\n                                <Grid item key={list.id}>\r\n                                    <Paper style={{padding: \"20px\"}} elevation={10}>\r\n                                        <Todolist\r\n                                            demo={demo}\r\n                                            listStatus={list.entityStatus}\r\n                                            todolistID={list.id}\r\n                                            title={list.title}\r\n                                            activeFilter={list.activeFilter}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {tasksActionsReducer} from \"./tasksActionsReducer\";\r\nimport {listsActionsReducer} from \"./listsActionsReducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./appReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksActionsReducer,\r\n    lists: listsActionsReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}