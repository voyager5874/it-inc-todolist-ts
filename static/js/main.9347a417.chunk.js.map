{"version":3,"sources":["api/it-inc-api.ts","AddItemForm.tsx","api/apiKey.ts","state/listsActionsReducer.ts","EditableSpan.tsx","state/tasksActionsReducer.ts","Task.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["TaskStatus","TaskPriority","AddItemFormWrapper","styled","div","AddItemForm","React","memo","props","console","log","addItemCallback","toString","useState","inputText","setInputText","inputError","setInputError","addItem","useCallback","cleanString","trim","keyPressWithinInputHandler","event","key","TextField","label","size","variant","value","error","onChange","currentTarget","onKeyPress","IconButton","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","backendAPI","todolistId","title","put","delete","name","post","get","todolistID","taskID","requestPayload","initialState","EditableSpan","itemName","editMode","setEditMode","setError","inputChangeHandler","saveNewName","cleanInputText","itemNameChangedCallback","enterPressHandler","Boolean","helperText","autoFocus","onBlur","onDoubleClick","updateTaskTC","listID","newTaskData","dispatch","getState","taskToBeChanged","tasks","find","task","id","deadline","description","priority","startDate","status","then","response","newData","type","payload","updateTaskDataAC","warn","Task","taskName","changeStatus","newTaskStatus","checked","Completed","New","changeName","newName","removeTask","TaskNameWithCheckboxWrapper","Checkbox","isDone","color","Backspace","TodolistCard","FilterButtonsWrapper","Todolist","useSelector","state","useDispatch","useEffect","todoListID","setTasksAC","data","items","filteredTasks","activeFilter","filter","changeTaskStatus","newStatus","addTask","addTaskAC","item","removeTaskAC","removeTaskTC","changeFilter","newFilterValue","deleteTodolist","action","removeListAC","changeTaskName","changeListName","changeListNameAC","changeListNameTC","Delete","List","disablePadding","map","ListItem","disableGutters","style","justifyContent","Button","App","todolists","lists","addTodolist","listName","todoList","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","paddingTop","spacing","list","Paper","padding","elevation","window","location","hostname","match","rootReducer","combineReducers","stateCopy","forEach","newInAppList","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9347a417.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {itIncAPI} from \"./apiKey\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': itIncAPI\r\n    }\r\n})\r\n\r\nexport enum TaskStatus {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft,\r\n}\r\n\r\nexport enum TaskPriority {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgent,\r\n    Someday,\r\n}\r\n\r\nexport type TodoListOnServerType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatus\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype BaseResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: T\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    error: null | string\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\n\r\nexport type putRequestBodyType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatus\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nexport const backendAPI = {\r\n    updateTodoList(todolistId: string, title: string) {\r\n        return instance.put<BaseResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    deleteTodoList(todolistId: string) {\r\n        return instance.delete<BaseResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    createTodoList(name: string) {\r\n        return instance.post<BaseResponseType<{ item: TodoListOnServerType }>>('todo-lists', {title: name})\r\n    },\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListOnServerType>>('todo-lists')\r\n    },\r\n    createTask(todolistID: string, name: string) {\r\n        return instance.post<BaseResponseType<{ item: TaskType }>>(`todo-lists/${todolistID}/tasks`, {title: name})\r\n    },\r\n    getTasks(todolistID: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistID}/tasks`)\r\n    },\r\n    // updateTask(todolistID: string, taskID: string, newName: string, description: string, newStatus: TaskStatus) {\r\n    updateTask(todolistID: string, taskID: string, requestPayload: putRequestBodyType) {\r\n        return instance.put<BaseResponseType<{ item: TaskType }>>(`todo-lists/${todolistID}/tasks/${taskID}`, requestPayload)\r\n    },\r\n    deleteTask(todolistID: string, taskID: string) {\r\n        return instance.delete<BaseResponseType>(`/todo-lists/${todolistID}/tasks/${taskID}`)\r\n\r\n    }\r\n}","import React, {useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport styled from \"styled-components\";\r\n\r\ntype addItemFormPropsType = {\r\n    addItemCallback: (itemName: string) => void\r\n}\r\nconst AddItemFormWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-bottom: 20px;\r\n`\r\n\r\nexport const AddItemForm = React.memo((props: addItemFormPropsType) => {\r\n    console.log(`AddItemForm with \"${props.addItemCallback.toString()}\" callback was called`)\r\n    const [inputText, setInputText] = useState<string>('')\r\n    const [inputError, setInputError] = useState<boolean>(false)\r\n\r\n    const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (inputError) {\r\n            setInputError(false)\r\n        }\r\n        setInputText(event.currentTarget.value)\r\n    }\r\n\r\n    const addItem = useCallback(() => {\r\n        const cleanString = inputText.trim()\r\n        if (cleanString) {\r\n            props.addItemCallback(cleanString)\r\n        } else {\r\n            setInputError(true)\r\n        }\r\n        setInputText('')\r\n    },[inputText, props.addItemCallback])\r\n\r\n    const keyPressWithinInputHandler = useCallback((event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }, [addItem])\r\n\r\n\r\n    return (\r\n        <AddItemFormWrapper>\r\n            <TextField\r\n                label={inputError ? 'give it a name' : 'Title'}\r\n                size={\"small\"}\r\n                variant={\"outlined\"}\r\n                value={inputText}\r\n                error={inputError}\r\n                onChange={inputChangeHandler}\r\n                onKeyPress={keyPressWithinInputHandler}/>\r\n            <IconButton onClick={addItem}><AddBox/></IconButton>\r\n        </AddItemFormWrapper>\r\n    );\r\n});\r\n\r\n","export const itIncAPI = 'dd744663-c08a-476e-8a84-c072bf5b7a68'","import {backendAPI, TodoListOnServerType} from \"../api/it-inc-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type TasksFilterType = 'all' | 'completed' | 'active'\r\n\r\nexport type TodoListInAppType = TodoListOnServerType & {\r\n    activeFilter: TasksFilterType\r\n}\r\n\r\nlet initialState: Array<TodoListInAppType> = []\r\n\r\n\r\nexport const listsActionsReducer = (state: Array<TodoListInAppType> = initialState, action: ListsActionsType): Array<TodoListInAppType> => {\r\n    switch (action.type) {\r\n        case 'ADD-LIST': {\r\n            const newInAppList: TodoListInAppType = {...action.payload.todoList, activeFilter: 'all'}\r\n            return [newInAppList, ...state]\r\n        }\r\n        case 'REMOVE-LIST':\r\n            return state.filter(list => list.id !== action.payload.listID)\r\n        case 'CHANGE-FILTER':\r\n            return state.map(list => list.id === action.payload.listID ? {\r\n                ...list,\r\n                activeFilter: action.payload.activeFilter\r\n            } : list)\r\n        case 'CHANGE-LIST-NAME':\r\n            return state.map(list => list.id === action.payload.listID ? {\r\n                ...list,\r\n                title: action.payload.newName\r\n            } : list)\r\n        case \"SET-LISTS\":\r\n            return action.payload.lists.map(list => ({...list, activeFilter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\n\r\ntype ListsActionsType =\r\n    AddListActionType\r\n    | RemoveListActionType\r\n    | ChangeFilterActionType\r\n    | ChangeListNameActionType\r\n    | setListsActionType\r\n\r\nexport type RemoveListActionType = ReturnType<typeof removeListAC>\r\nexport const removeListAC = (listID: string) => {\r\n    return {\r\n        type: 'REMOVE-LIST',\r\n        payload: {\r\n            listID: listID,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type AddListActionType = ReturnType<typeof addListAC>\r\nexport const addListAC = (todoList: TodoListOnServerType) => {\r\n    return {\r\n        type: 'ADD-LIST',\r\n        payload: {\r\n            todoList,\r\n        },\r\n    } as const\r\n}\r\n\r\ntype ChangeFilterActionType = ReturnType<typeof changeFilterAC>\r\nexport const changeFilterAC = (listID: string, filter: TasksFilterType) => {\r\n    return {\r\n        type: 'CHANGE-FILTER',\r\n        payload: {\r\n            listID: listID,\r\n            activeFilter: filter\r\n        }\r\n    } as const\r\n}\r\n\r\ntype ChangeListNameActionType = ReturnType<typeof changeListNameAC>\r\nexport const changeListNameAC = (listID: string, newName: string) => {\r\n    return {\r\n        type: 'CHANGE-LIST-NAME',\r\n        payload: {\r\n            listID,\r\n            newName,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type setListsActionType = ReturnType<typeof setListsAC>\r\nexport const setListsAC = (lists: Array<TodoListOnServerType>) => {\r\n    return {\r\n        type: 'SET-LISTS',\r\n        payload: {\r\n            lists,\r\n        },\r\n    } as const\r\n}\r\n\r\n\r\nexport const fetchListsThunk = () => {\r\n    return (dispatch: Dispatch) => {\r\n        backendAPI.getTodoLists()\r\n            .then(response => {\r\n                dispatch(setListsAC(response.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeListTC = (listID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        backendAPI.deleteTodoList(listID)\r\n            .then(response=> dispatch(removeListAC(listID)))\r\n    }\r\n}\r\n\r\nexport const addListTC = (name: string) => {\r\n    return (dispatch: Dispatch) => {\r\n     backendAPI.createTodoList(name)\r\n         .then(response => {\r\n             dispatch(addListAC(response.data.data.item))\r\n         })\r\n    }\r\n}\r\n\r\nexport const changeListNameTC = (listID: string, newName: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        backendAPI.updateTodoList(listID, newName)\r\n            .then(response => {\r\n                dispatch(changeListNameAC(listID, newName))\r\n            })\r\n    }\r\n}","import React, {useCallback, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    itemName: string\r\n    itemNameChangedCallback: (newName: string) => void\r\n}\r\n\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log(`editableSpan was called, text: ${props.itemName}`)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputText, setInputText] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const itemDoubleClickHandler = () => {\r\n        setEditMode(true)\r\n        setInputText(props.itemName)\r\n    }\r\n\r\n    const inputChangeHandler = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setInputText(event.currentTarget.value)\r\n    }, [])\r\n\r\n    const saveNewName = useCallback(() => {\r\n        const cleanInputText = inputText.trim()\r\n        if (cleanInputText) {\r\n            setEditMode(false)\r\n            props.itemNameChangedCallback(cleanInputText)\r\n            setInputText(props.itemName)\r\n        } else {\r\n            setInputText('')\r\n            setError(true)\r\n        }\r\n\r\n    }, [inputText])\r\n\r\n    const enterPressHandler = useCallback((event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            saveNewName()\r\n        }\r\n    }, [saveNewName])\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                error={Boolean(error)}\r\n                helperText={error}\r\n                onKeyPress={enterPressHandler}\r\n                autoFocus={true}\r\n                onBlur={saveNewName}\r\n                value={inputText}\r\n                onChange={inputChangeHandler}\r\n            /> :\r\n            <span\r\n                onDoubleClick={itemDoubleClickHandler}>{props.itemName}\r\n            </span>\r\n\r\n    );\r\n});\r\n\r\n","import {AddListActionType, RemoveListActionType, setListsActionType} from \"./listsActionsReducer\";\r\nimport {backendAPI, TaskPriority, TaskStatus, TaskType, putRequestBodyType} from \"../api/it-inc-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"./store\";\r\n\r\n\r\nlet initialState: TasksListType = {}\r\n\r\nexport type TasksListType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport const tasksActionsReducer = (state: TasksListType = initialState, action: TasksActionsType): TasksListType => {\r\n    switch (action.type) {\r\n\r\n        case 'ADD-TASK':\r\n            // action.payload.task.todoListId - where should I get the value ?\r\n            //new task always on top after app reload - is it server determined?\r\n            return {\r\n                ...state,\r\n                [action.payload.listID]: [action.payload.task, ...state[action.payload.listID]]\r\n            }\r\n\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.listID]: state[action.payload.listID].filter(task => task.id !== action.payload.taskID)\r\n            }\r\n\r\n        case \"UPDATE-TASK-DATA\":\r\n            return {...state, [action.payload.listID]: state[action.payload.listID].map(task => task.id === action.payload.taskID ? {...task, ...action.payload.newData} : task)}\r\n\r\n        case 'ADD-LIST':\r\n            return {...state, [action.payload.todoList.id]: []}\r\n\r\n        case 'REMOVE-LIST': {\r\n            debugger\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.payload.listID]\r\n            return stateCopy\r\n        }\r\n\r\n        case \"SET-LISTS\":\r\n            const stateCopy = {...state}\r\n            action.payload.lists.forEach(list => {\r\n                stateCopy[list.id] = []\r\n            })\r\n            return stateCopy\r\n\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.payload.todoListID]: action.payload.tasks}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype TasksActionsType =\r\n    AddTaskActionType\r\n    | RemoveTaskActionType\r\n    | AddListActionType\r\n    | RemoveListActionType\r\n    | setListsActionType\r\n    | setTasksActionType\r\n    | UpdateTaskDataActionType\r\n\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\n\r\nexport const addTaskAC = (listID: string, task: TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            listID,\r\n            task,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\n\r\nexport const removeTaskAC = (listID: string, taskID: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            listID: listID,\r\n            taskID: taskID,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype UpdateTaskDataActionType = ReturnType<typeof updateTaskDataAC>\r\n\r\nexport const updateTaskDataAC = (listID: string, taskID: string, newData: UpdateTaskDataType) => {\r\n    return {\r\n        type: 'UPDATE-TASK-DATA',\r\n        payload: {\r\n            listID,\r\n            taskID,\r\n            newData,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype setTasksActionType = ReturnType<typeof setTasksAC>\r\n\r\nexport const setTasksAC = (todoListID: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        payload: {\r\n            todoListID,\r\n            tasks,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport const fetchTasksTC = (todoListID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        backendAPI.getTasks(todoListID)\r\n            .then(response => dispatch(setTasksAC(todoListID, response.data.items)))\r\n    }\r\n\r\n}\r\n\r\nexport const removeTaskTC = (listID: string, taskID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        backendAPI.deleteTask(listID, taskID)\r\n            .then(response => {\r\n                dispatch(removeTaskAC(listID, taskID))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (listID: string, taskName: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        backendAPI.createTask(listID, taskName)\r\n            .then(response => {\r\n                dispatch(addTaskAC(listID, response.data.data.item))\r\n            })\r\n    }\r\n}\r\n\r\nexport type UpdateTaskDataType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatus\r\n    priority?: TaskPriority\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskTC = (listID: string, taskID: string, newTaskData: UpdateTaskDataType) => {\r\n\r\n    return (dispatch: Dispatch, getState: () => RootStateType) => {\r\n        const currentState = getState()\r\n        const taskToBeChanged = currentState.tasks[listID].find(task => task.id === taskID)\r\n\r\n        if (!taskToBeChanged) {\r\n            console.warn(`task with id ${taskID} not found in todo list ${listID}`)\r\n            return\r\n        }\r\n\r\n        const requestPayload: putRequestBodyType = {\r\n            deadline: taskToBeChanged.deadline,\r\n            description: taskToBeChanged.description,\r\n            priority: taskToBeChanged.priority,\r\n            startDate: taskToBeChanged.startDate,\r\n            status: taskToBeChanged.status,\r\n            title: taskToBeChanged.title,\r\n            ...newTaskData,\r\n        }\r\n        backendAPI.updateTask(listID, taskID, requestPayload)\r\n            .then(response => {\r\n                dispatch(updateTaskDataAC(listID, taskID, newTaskData))\r\n            })\r\n    }\r\n}","import React, {useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Backspace} from \"@material-ui/icons\";\r\nimport styled from \"styled-components\";\r\nimport {TaskStatus} from \"./api/it-inc-api\";\r\n\r\ntype TaskPropsType = {\r\n    // listID: string\r\n    taskID: string\r\n    taskName: string\r\n    isDone: boolean\r\n    changeStatus: (taskID:string, newStatus: TaskStatus) => void\r\n    changeName: (taskID: string, newName: string) => void\r\n    removeTask: (taskID: string) => void\r\n\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    console.log(`Task was called, title: ${props.taskName}`)\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    const changeStatus = useCallback((event)=>{\r\n        const newTaskStatus = event.currentTarget.checked ? TaskStatus.Completed : TaskStatus.New\r\n        props.changeStatus(props.taskID, newTaskStatus)\r\n    },[props.changeStatus, props.taskID])\r\n\r\n    const changeName = useCallback((newName: string)=>{\r\n        props.changeName(props.taskID, newName)\r\n    },[props.changeName, props.taskID])\r\n\r\n    const removeTask = useCallback(()=>{\r\n        props.removeTask(props.taskID)\r\n    },[props.removeTask, props.taskID])\r\n\r\n    return <>\r\n        <TaskNameWithCheckboxWrapper>\r\n            <Checkbox checked={props.isDone}\r\n                      color={\"primary\"}\r\n                      onChange={changeStatus}/>\r\n            <EditableSpan itemName={props.taskName}\r\n                          itemNameChangedCallback={changeName}/>\r\n        </TaskNameWithCheckboxWrapper>\r\n\r\n        <IconButton size={\"small\"}\r\n            // variant={\"contained\"}\r\n                    onClick={removeTask}><Backspace\r\n            color={\"primary\"}\r\n        /></IconButton>\r\n    </>\r\n})\r\n\r\nconst TaskNameWithCheckboxWrapper = styled.div`\r\n  //min-width: 260px;\r\n  //border-bottom: 2px solid gray;\r\n`","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport styled from \"styled-components\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./state/store\";\r\nimport {addTaskTC, fetchTasksTC, removeTaskTC, updateTaskTC} from \"./state/tasksActionsReducer\";\r\nimport {changeFilterAC, changeListNameTC, removeListTC, TasksFilterType} from \"./state/listsActionsReducer\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatus, TaskType} from \"./api/it-inc-api\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolistID: string\r\n    title: string\r\n    activeFilter: TasksFilterType\r\n}\r\n\r\n\r\nconst TodolistCard = styled.div`\r\n  min-width: 300px;\r\n`\r\n\r\nconst FilterButtonsWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding-right: 0;\r\n`\r\n\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    console.log(`todolist was called, title: ${props.title}`)\r\n    const tasks = useSelector<RootStateType, Array<TaskType>>(state => state.tasks[props.todolistID])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchTasksTC(props.todolistID))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    let filteredTasks = tasks\r\n    if (props.activeFilter === 'active') {\r\n        filteredTasks = tasks.filter(task => task.status===TaskStatus.New)\r\n    }\r\n    if (props.activeFilter === 'completed') {\r\n        filteredTasks = tasks.filter(task => task.status===TaskStatus.Completed)\r\n    }\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, newStatus: TaskStatus) => {\r\n        dispatch(updateTaskTC(props.todolistID, taskID, {status: newStatus}))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const addTask = useCallback((name: string) => {\r\n        dispatch(addTaskTC(props.todolistID, name))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const removeTask = useCallback((taskID: string) => {\r\n        dispatch(removeTaskTC(props.todolistID, taskID))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const changeFilter = useCallback((newFilterValue: TasksFilterType) => {\r\n        dispatch(changeFilterAC(props.todolistID, newFilterValue))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const deleteTodolist = useCallback(() => {\r\n        let action = removeListTC(props.todolistID)\r\n        dispatch(action)\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const changeTaskName = useCallback((taskID: string, newName: string) => {\r\n        dispatch(updateTaskTC(props.todolistID, taskID, {title: newName}))\r\n    }, [dispatch, props.todolistID])\r\n\r\n    const changeListName = useCallback((newName: string) => {\r\n        dispatch(changeListNameTC(props.todolistID, newName))\r\n    }, [dispatch, props.todolistID])\r\n\r\n\r\n    return (\r\n        <TodolistCard>\r\n            <h3>\r\n                <EditableSpan itemName={props.title} itemNameChangedCallback={changeListName}/>\r\n                <IconButton onClick={deleteTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItemCallback={addTask}/>\r\n            <List disablePadding>\r\n                {\r\n                    filteredTasks.map(task =>\r\n                        <ListItem disableGutters key={task.id}\r\n                                  style={{justifyContent: \"space-between\"}}\r\n                        >\r\n                            <Task taskID={task.id}\r\n                                  isDone={task.status === TaskStatus.Completed}\r\n                                  changeName={changeTaskName}\r\n                                  taskName={task.title}\r\n                                  changeStatus={changeTaskStatus}\r\n                                  removeTask={removeTask}\r\n                            />\r\n                        </ListItem>)\r\n\r\n                }\r\n                {/*< Divider variant=\"inset\" component=\"li\"/>*/}\r\n            </List>\r\n            <FilterButtonsWrapper>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"all\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('all')}>All\r\n                </Button>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"active\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('active')}>Active\r\n                </Button>\r\n                <Button variant=\"contained\" color={props.activeFilter === \"completed\" ? \"primary\" : \"default\"}\r\n                        onClick={() => changeFilter('completed')}>Completed\r\n                </Button>\r\n            </FilterButtonsWrapper>\r\n\r\n        </TodolistCard>\r\n    )\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addListTC, fetchListsThunk, TodoListInAppType} from \"./state/listsActionsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./state/store\";\r\nimport {Todolist} from \"./Todolist\";\r\n\r\n\r\nexport const App = () => {\r\n    console.log(\"app was called\")\r\n    const todolists = useSelector<RootStateType, TodoListInAppType[]>(state => state.lists);\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchListsThunk())\r\n    },[dispatch])\r\n\r\n    const addTodolist = useCallback((listName: string) => {\r\n        if (listName) {\r\n            dispatch(addListTC(listName))\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{paddingTop: \"20px\"}}>\r\n                    <AddItemForm addItemCallback={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(list => {\r\n                            return (\r\n                                <Grid item key={list.id}>\r\n                                    <Paper style={{padding: \"20px\"}} elevation={10}>\r\n                                        <Todolist\r\n                                            todolistID={list.id}\r\n                                            title={list.title}\r\n                                            activeFilter={list.activeFilter}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {tasksActionsReducer} from \"./tasksActionsReducer\";\r\nimport {listsActionsReducer} from \"./listsActionsReducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksActionsReducer,\r\n    lists: listsActionsReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}